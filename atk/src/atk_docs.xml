<root>
<signal name="AtkComponent::bounds-changed">
<description>
The 'bounds-changed&quot; signal is emitted when the bposition or
size of the component changes.

</description>
<parameters>
<parameter name="atkcomponent">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
<parameter name="arg1">
<parameter_description> The AtkRectangle giving the new position and size.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="AtkCoordType">
<description>
Specifies how xy coordinates are to be interpreted. Used by functions such
as atk_component_get_position() and atk_text_get_character_extents() 

</description>
<parameters>
<parameter name="ATK_XY_SCREEN">
<parameter_description> specifies xy coordinates relative to the screen
</parameter_description>
</parameter>
<parameter name="ATK_XY_WINDOW">
<parameter_description> specifies xy coordinates relative to the widget's 
top-level window
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="AtkDocument::load-complete">
<description>
The 'load-complete' signal is emitted when a pending load of
a static document has completed.  This signal is to be
expected by ATK clients if and when AtkDocument implementors
expose ATK_STATE_BUSY.  If the state of an AtkObject which
implements AtkDocument does not include ATK_STATE_BUSY, it
should be safe for clients to assume that the AtkDocument's
static contents are fully loaded into the container.
(Dynamic document contents should be exposed via other
signals.)

</description>
<parameters>
<parameter name="atkdocument">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkDocument::load-stopped">
<description>
The 'load-stopped' signal is emitted when a pending load of
document contents is cancelled, paused, or otherwise
interrupted by the user or application logic.  It should not
however be emitted while waiting for a resource (for instance
while blocking on a file or network read) unless a
user-significant timeout has occurred.

</description>
<parameters>
<parameter name="atkdocument">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkDocument::page-changed">
<description>
The 'page-changed' signal is emitted when the current page of
a document changes, e.g. pressing page up/down in a document
viewer.

Since: 2.12

</description>
<parameters>
<parameter name="atkdocument">
<parameter_description> the object on which the signal was emitted
</parameter_description>
</parameter>
<parameter name="page_number">
<parameter_description> the new page number. If this value is unknown
or not applicable, -1 should be provided.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkDocument::reload">
<description>
The 'reload' signal is emitted when the contents of a
document is refreshed from its source.  Once 'reload' has
been emitted, a matching 'load-complete' or 'load-stopped'
signal should follow, which clients may await before
interrogating ATK for the latest document content.

</description>
<parameters>
<parameter name="atkdocument">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkHyperlink::link-activated">
<description>
The signal link-activated is emitted when a link is activated.

</description>
<parameters>
<parameter name="atkhyperlink">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="AtkHyperlinkStateFlags">
<description>
Describes the type of link

</description>
<parameters>
<parameter name="ATK_HYPERLINK_IS_INLINE">
<parameter_description> Link is inline
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="AtkHypertext::link-selected">
<description>
The &quot;link-selected&quot; signal is emitted by an AtkHyperText
object when one of the hyperlinks associated with the object
is selected.

</description>
<parameters>
<parameter name="atkhypertext">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
<parameter name="arg1">
<parameter_description> the index of the hyperlink which is selected
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="AtkKeyEventType">
<description>
Specifies the type of a keyboard evemt.

</description>
<parameters>
<parameter name="ATK_KEY_EVENT_PRESS">
<parameter_description> specifies a key press event
</parameter_description>
</parameter>
<parameter name="ATK_KEY_EVENT_RELEASE">
<parameter_description> specifies a key release event
</parameter_description>
</parameter>
<parameter name="ATK_KEY_EVENT_LAST_DEFINED">
<parameter_description> Not a valid value; specifies end of enumeration
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="AtkLayer">
<description>
Describes the layer of a component

These enumerated &quot;layer values&quot; are used when determining which UI
rendering layer a component is drawn into, which can help in making
determinations of when components occlude one another.

</description>
<parameters>
<parameter name="ATK_LAYER_INVALID">
<parameter_description> The object does not have a layer
</parameter_description>
</parameter>
<parameter name="ATK_LAYER_BACKGROUND">
<parameter_description> This layer is reserved for the desktop background
</parameter_description>
</parameter>
<parameter name="ATK_LAYER_CANVAS">
<parameter_description> This layer is used for Canvas components
</parameter_description>
</parameter>
<parameter name="ATK_LAYER_WIDGET">
<parameter_description> This layer is normally used for components
</parameter_description>
</parameter>
<parameter name="ATK_LAYER_MDI">
<parameter_description> This layer is used for layered components
</parameter_description>
</parameter>
<parameter name="ATK_LAYER_POPUP">
<parameter_description> This layer is used for popup components, such as menus
</parameter_description>
</parameter>
<parameter name="ATK_LAYER_OVERLAY">
<parameter_description> This layer is reserved for future use.
</parameter_description>
</parameter>
<parameter name="ATK_LAYER_WINDOW">
<parameter_description> This layer is used for toplevel windows.
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="AtkObject::active-descendant-changed">
<description>
The &quot;active-descendant-changed&quot; signal is emitted by an object
which has the state ATK_STATE_MANAGES_DESCENDANTS when the focus
object in the object changes. For instance, a table will emit the
signal when the cell in the table which has focus changes.

</description>
<parameters>
<parameter name="atkobject">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
<parameter name="arg1">
<parameter_description> the newly focused object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkObject::children-changed">
<description>
The signal &quot;children-changed&quot; is emitted when a child is added or
removed form an object. It supports two details: &quot;add&quot; and
&quot;remove&quot;

</description>
<parameters>
<parameter name="atkobject">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
<parameter name="arg1">
<parameter_description> The index of the added or removed child. The value can be
-1. This is used if the value is not known by the implementor
when the child is added/removed or irrelevant.
</parameter_description>
</parameter>
<parameter name="arg2">
<parameter_description> A gpointer to the child AtkObject which was added or
removed. If the child was removed, it is possible that it is not
available for the implementor. In that case this pointer can be
NULL.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkObject::focus-event">
<description>
The signal &quot;focus-event&quot; is emitted when an object gained or lost
focus.

Deprecated: 2.9.4: Use the #AtkObject::state-change signal instead.

</description>
<parameters>
<parameter name="atkobject">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
<parameter name="arg1">
<parameter_description> a boolean value which indicates whether the object gained
or lost focus.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkObject::property-change">
<description>
The signal &quot;property-change&quot; is emitted when an object's property
value changes. @arg1 contains an #AtkPropertyValues with the name
and the new value of the property whose value has changed. Note
that, as with GObject notify, getting this signal does not
guarantee that the value of the property has actually changed; it
may also be emitted when the setter of the property is called to
reinstate the previous value.

Toolkit implementor note: ATK implementors should use
g_object_notify() to emit property-changed
notifications. #AtkObject::property-changed is needed by the
implementation of atk_add_global_event_listener() because GObject
notify doesn't support emission hooks.

</description>
<parameters>
<parameter name="atkobject">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
<parameter name="arg1">
<parameter_description> an #AtkPropertyValues containing the new value of the
property which changed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkObject::state-change">
<description>
The &quot;state-change&quot; signal is emitted when an object's state
changes.  The detail value identifies the state type which has
changed.

</description>
<parameters>
<parameter name="atkobject">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
<parameter name="arg1">
<parameter_description> The name of the state which has changed
</parameter_description>
</parameter>
<parameter name="arg2">
<parameter_description> A boolean which indicates whether the state has been set or unset.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkObject::visible-data-changed">
<description>
The &quot;visible-data-changed&quot; signal is emitted when the visual
appearance of the object changed.

</description>
<parameters>
<parameter name="atkobject">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="AtkRelationType">
<description>
Describes the type of the relation

</description>
<parameters>
<parameter name="ATK_RELATION_NULL">
<parameter_description> Not used, represens &quot;no relationship&quot; or an error condition.
</parameter_description>
</parameter>
<parameter name="ATK_RELATION_CONTROLLED_BY">
<parameter_description> Indicates an object controlled by one or more target objects.
</parameter_description>
</parameter>
<parameter name="ATK_RELATION_CONTROLLER_FOR">
<parameter_description> Indicates an object is an controller for one or more target objects.
</parameter_description>
</parameter>
<parameter name="ATK_RELATION_LABEL_FOR">
<parameter_description> Indicates an object is a label for one or more target objects.
</parameter_description>
</parameter>
<parameter name="ATK_RELATION_LABELLED_BY">
<parameter_description> Indicates an object is labelled by one or more target objects.
</parameter_description>
</parameter>
<parameter name="ATK_RELATION_MEMBER_OF">
<parameter_description> Indicates an object is a member of a group of one or more target objects.
</parameter_description>
</parameter>
<parameter name="ATK_RELATION_NODE_CHILD_OF">
<parameter_description> Indicates an object is a cell in a treetable which is displayed because a cell in the same column is expanded and identifies that cell.
</parameter_description>
</parameter>
<parameter name="ATK_RELATION_FLOWS_TO">
<parameter_description> Indicates that the object has content that flows logically to another
AtkObject in a sequential way, (for instance text-flow).
</parameter_description>
</parameter>
<parameter name="ATK_RELATION_FLOWS_FROM">
<parameter_description> Indicates that the object has content that flows logically from
another AtkObject in a sequential way, (for instance text-flow).
</parameter_description>
</parameter>
<parameter name="ATK_RELATION_SUBWINDOW_OF">
<parameter_description> Indicates a subwindow attached to a component but otherwise has no connection in  the UI heirarchy to that component.
</parameter_description>
</parameter>
<parameter name="ATK_RELATION_EMBEDS">
<parameter_description> Indicates that the object visually embeds 
another object's content, i.e. this object's content flows around 
another's content.
</parameter_description>
</parameter>
<parameter name="ATK_RELATION_EMBEDDED_BY">
<parameter_description> Inverse of %ATK_RELATION_EMBEDS, indicates that
this object's content is visualy embedded in another object.
</parameter_description>
</parameter>
<parameter name="ATK_RELATION_POPUP_FOR">
<parameter_description> Indicates that an object is a popup for another object.
</parameter_description>
</parameter>
<parameter name="ATK_RELATION_PARENT_WINDOW_OF">
<parameter_description> Indicates that an object is a parent window of another object.
</parameter_description>
</parameter>
<parameter name="ATK_RELATION_DESCRIBED_BY">
<parameter_description> Indicates that another object provides descriptive information about this object; more verbose than ATK_RELATION_LABELLED_BY.
</parameter_description>
</parameter>
<parameter name="ATK_RELATION_DESCRIPTION_FOR">
<parameter_description> Indicates that an object provides descriptive information about another object; more verbose than ATK_RELATION_LABEL_FOR.
</parameter_description>
</parameter>
<parameter name="ATK_RELATION_NODE_PARENT_OF">
<parameter_description> Indicates an object is a cell in a treetable and is expanded to display other cells in the same column.
</parameter_description>
</parameter>
<parameter name="ATK_RELATION_LAST_DEFINED">
<parameter_description> Not used, this value indicates the end of the enumeration.
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="AtkSelection::selection-changed">
<description>
The &quot;selection-changed&quot; signal is emitted by an object which
implements AtkSelection interface when the selection changes.

</description>
<parameters>
<parameter name="atkselection">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkTable::column-deleted">
<description>
The &quot;column-deleted&quot; signal is emitted by an object which
implements the AtkTable interface when a column is deleted.

</description>
<parameters>
<parameter name="atktable">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
<parameter name="arg1">
<parameter_description> The index of the first column deleted.
</parameter_description>
</parameter>
<parameter name="arg2">
<parameter_description> The number of columns deleted.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkTable::column-inserted">
<description>
The &quot;column-inserted&quot; signal is emitted by an object which
implements the AtkTable interface when a column is inserted.

</description>
<parameters>
<parameter name="atktable">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
<parameter name="arg1">
<parameter_description> The index of the column inserted.
</parameter_description>
</parameter>
<parameter name="arg2">
<parameter_description> The number of colums inserted.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkTable::column-reordered">
<description>
The &quot;column-reordered&quot; signal is emitted by an object which
implements the AtkTable interface when the columns are
reordered.

</description>
<parameters>
<parameter name="atktable">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkTable::model-changed">
<description>
The &quot;model-changed&quot; signal is emitted by an object which
implements the AtkTable interface when the model displayed by
the table changes.

</description>
<parameters>
<parameter name="atktable">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkTable::row-deleted">
<description>
The &quot;row-deleted&quot; signal is emitted by an object which
implements the AtkTable interface when a row is deleted.

</description>
<parameters>
<parameter name="atktable">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
<parameter name="arg1">
<parameter_description> The index of the first row deleted.
</parameter_description>
</parameter>
<parameter name="arg2">
<parameter_description> The number of rows deleted.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkTable::row-inserted">
<description>
The &quot;row-inserted&quot; signal is emitted by an object which
implements the AtkTable interface when a row is inserted.

</description>
<parameters>
<parameter name="atktable">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
<parameter name="arg1">
<parameter_description> The index of the first row inserted.
</parameter_description>
</parameter>
<parameter name="arg2">
<parameter_description> The number of rows inserted.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkTable::row-reordered">
<description>
The &quot;row-reordered&quot; signal is emitted by an object which
implements the AtkTable interface when the rows are
reordered.

</description>
<parameters>
<parameter name="atktable">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkText::text-attributes-changed">
<description>
The &quot;text-attributes-changed&quot; signal is emitted when the text
attributes of the text of an object which implements AtkText
changes.

</description>
<parameters>
<parameter name="atktext">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkText::text-caret-moved">
<description>
The &quot;text-caret-moved&quot; signal is emitted when the caret
position of the text of an object which implements AtkText
changes.

</description>
<parameters>
<parameter name="atktext">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
<parameter name="arg1">
<parameter_description> The new position of the text caret.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkText::text-changed">
<description>
The &quot;text-changed&quot; signal is emitted when the text of the
object which implements the AtkText interface changes, This
signal will have a detail which is either &quot;insert&quot; or
&quot;delete&quot; which identifies whether the text change was an
insertion or a deletion.

Deprecated: 2.9.4: Use #AtkObject::text-insert or
#AtkObject::text-remove instead.

</description>
<parameters>
<parameter name="atktext">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
<parameter name="arg1">
<parameter_description> The position (character offset) of the insertion or deletion.
</parameter_description>
</parameter>
<parameter name="arg2">
<parameter_description> The length (in characters) of text inserted or deleted.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkText::text-insert">
<description>
The &quot;text-insert&quot; signal is emitted when a new text is
inserted. If the signal was not triggered by the user
(e.g. typing or pasting text), the &quot;system&quot; detail should be
included.

</description>
<parameters>
<parameter name="atktext">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
<parameter name="arg1">
<parameter_description> The position (character offset) of the insertion.
</parameter_description>
</parameter>
<parameter name="arg2">
<parameter_description> The length (in characters) of text inserted.
</parameter_description>
</parameter>
<parameter name="arg3">
<parameter_description> The new text inserted
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkText::text-remove">
<description>
The &quot;text-remove&quot; signal is emitted when a new text is
removed. If the signal was not triggered by the user
(e.g. typing or pasting text), the &quot;system&quot; detail should be
included.

</description>
<parameters>
<parameter name="atktext">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
<parameter name="arg1">
<parameter_description> The position (character offset) of the removal.
</parameter_description>
</parameter>
<parameter name="arg2">
<parameter_description> The length (in characters) of text removed.
</parameter_description>
</parameter>
<parameter name="arg3">
<parameter_description> The old text removed
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkText::text-selection-changed">
<description>
The &quot;text-selection-changed&quot; signal is emitted when the
selected text of an object which implements AtkText changes.

</description>
<parameters>
<parameter name="atktext">
<parameter_description> the object which received the signal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<enum name="AtkTextAttribute">
<description>
Describes the text attributes supported

</description>
<parameters>
<parameter name="ATK_TEXT_ATTR_INVALID">
<parameter_description> Invalid attribute, like bad spelling or grammar.
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_LEFT_MARGIN">
<parameter_description> The pixel width of the left margin
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_RIGHT_MARGIN">
<parameter_description> The pixel width of the right margin
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_INDENT">
<parameter_description> The number of pixels that the text is indented
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_INVISIBLE">
<parameter_description> Either &quot;true&quot; or &quot;false&quot; indicating whether text is visible or not
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_EDITABLE">
<parameter_description> Either &quot;true&quot; or &quot;false&quot; indicating whether text is editable or not
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_PIXELS_ABOVE_LINES">
<parameter_description> Pixels of blank space to leave above each newline-terminated line. 
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_PIXELS_BELOW_LINES">
<parameter_description> Pixels of blank space to leave below each newline-terminated line.
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP">
<parameter_description> Pixels of blank space to leave between wrapped lines inside the same newline-terminated line (paragraph).
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_BG_FULL_HEIGHT">
<parameter_description> &quot;true&quot; or &quot;false&quot; whether to make the background color for each character the height of the highest font used on the current line, or the height of the font used for the current character.
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_RISE">
<parameter_description> Number of pixels that the characters are risen above the baseline
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_UNDERLINE">
<parameter_description> &quot;none&quot;, &quot;single&quot;, &quot;double&quot;, &quot;low&quot;, or &quot;error&quot;
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_STRIKETHROUGH">
<parameter_description> &quot;true&quot; or &quot;false&quot; whether the text is strikethrough 
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_SIZE">
<parameter_description> The size of the characters in points. eg: 10
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_SCALE">
<parameter_description> The scale of the characters. The value is a string representation of a double 
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_WEIGHT">
<parameter_description> The weight of the characters.
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_LANGUAGE">
<parameter_description> The language used
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_FAMILY_NAME">
<parameter_description> The font family name
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_BG_COLOR">
<parameter_description> The background color. The value is an RGB value of the format &quot;%u,%u,%u&quot;
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_FG_COLOR">
<parameter_description>The foreground color. The value is an RGB value of the format &quot;%u,%u,%u&quot;
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_BG_STIPPLE">
<parameter_description> &quot;true&quot; if a #GdkBitmap is set for stippling the background color.
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_FG_STIPPLE">
<parameter_description> &quot;true&quot; if a #GdkBitmap is set for stippling the foreground color.
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_WRAP_MODE">
<parameter_description> The wrap mode of the text, if any. Values are &quot;none&quot;, &quot;char&quot;, &quot;word&quot;, or &quot;word_char&quot;.
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_DIRECTION">
<parameter_description> The direction of the text, if set. Values are &quot;none&quot;, &quot;ltr&quot; or &quot;rtl&quot; 
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_JUSTIFICATION">
<parameter_description> The justification of the text, if set. Values are &quot;left&quot;, &quot;right&quot;, &quot;center&quot; or &quot;fill&quot; 
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_STRETCH">
<parameter_description> The stretch of the text, if set. Values are &quot;ultra_condensed&quot;, &quot;extra_condensed&quot;, &quot;condensed&quot;, &quot;semi_condensed&quot;, &quot;normal&quot;, &quot;semi_expanded&quot;, &quot;expanded&quot;, &quot;extra_expanded&quot; or &quot;ultra_expanded&quot;
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_VARIANT">
<parameter_description> The capitalization variant of the text, if set. Values are &quot;normal&quot; or &quot;small_caps&quot;
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_STYLE">
<parameter_description> The slant style of the text, if set. Values are &quot;normal&quot;, &quot;oblique&quot; or &quot;italic&quot;
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_ATTR_LAST_DEFINED">
<parameter_description> not a valid text attribute, used for finding end of enumeration
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="AtkTextBoundary">
<description>
Text boundary types used for specifying boundaries for regions of text.
This enumerationis deprecated since 2.9.4 and should not be used. Use
AtkTextGranularity with #atk_text_get_string_at_offset instead.

</description>
<parameters>
<parameter name="ATK_TEXT_BOUNDARY_CHAR">
<parameter_description> Boundary is the boundary between characters
(including non-printing characters)
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_BOUNDARY_WORD_START">
<parameter_description> Boundary is the start (i.e. first character) of a word.
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_BOUNDARY_WORD_END">
<parameter_description> Boundary is the end (i.e. last
character) of a word.
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_BOUNDARY_SENTENCE_START">
<parameter_description> Boundary is the first character in a sentence.
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_BOUNDARY_SENTENCE_END">
<parameter_description> Boundary is the last (terminal)
character in a sentence; in languages which use &quot;sentence stop&quot;
punctuation such as English, the boundary is thus the '.', '?', or
similar terminal punctuation character.
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_BOUNDARY_LINE_START">
<parameter_description> Boundary is the initial character of the content or a
character immediately following a newline, linefeed, or return character.
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_BOUNDARY_LINE_END">
<parameter_description> Boundary is the linefeed, or return
character.
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="AtkTextClipType">
<description>
Describes the type of clipping required.

</description>
<parameters>
<parameter name="ATK_TEXT_CLIP_NONE">
<parameter_description> No clipping to be done
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_CLIP_MIN">
<parameter_description> Text clipped by min coordinate is omitted
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_CLIP_MAX">
<parameter_description> Text clipped by max coordinate is omitted
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_CLIP_BOTH">
<parameter_description> Only text fully within mix/max bound is retained
</parameter_description>
</parameter>
</parameters>
</enum>

<enum name="AtkTextGranularity">
<description>
Text granularity types used for specifying the granularity of the region of
text we are interested in.

</description>
<parameters>
<parameter name="ATK_TEXT_GRANULARITY_CHAR">
<parameter_description> Granularity is defined by the boundaries between characters
(including non-printing characters)
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_GRANULARITY_WORD">
<parameter_description> Granularity is defined by the boundaries of a word,
starting at the beginning of the current word and finishing at the beginning of
the following one, if present.
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_GRANULARITY_SENTENCE">
<parameter_description> Granularity is defined by the boundaries of a sentence,
starting at the beginning of the current sentence and finishing at the beginning of
the following one, if present.
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_GRANULARITY_LINE">
<parameter_description> Granularity is defined by the boundaries of a line,
starting at the beginning of the current line and finishing at the beginning of
the following one, if present.
</parameter_description>
</parameter>
<parameter name="ATK_TEXT_GRANULARITY_PARAGRAPH">
<parameter_description> Granularity is defined by the boundaries of a paragraph,
starting at the beginning of the current paragraph and finishing at the beginning of
the following one, if present.
</parameter_description>
</parameter>
</parameters>
</enum>

<signal name="AtkValue::value-changed">
<description>
The 'value-changed' signal is emitted when the current value
that represent the object changes. @value is the numerical
representation of this new value.  @text is the human
readable text alternative of @value, and can be NULL if it is
not available. Note that if there is a textual description
associated with the new numeric value, that description
should be included regardless of whether or not it has also
changed.

Example: a password meter whose value changes as the user
types their new password. Appropiate value text would be
&quot;weak&quot;, &quot;acceptable&quot; and &quot;strong&quot;.

Since: 2.12

</description>
<parameters>
<parameter name="atkvalue">
<parameter_description> the object on which the signal was emitted.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> the new value in a numerical form.
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> human readable text alternative (also called
description) of this object. NULL if not available.
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkWindow::activate">
<description>
The signal #AtkWindow::activate is emitted when a window
becomes the active window of the application or session.

Since: 2.2

</description>
<parameters>
<parameter name="object">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkWindow::create">
<description>
The signal #AtkWindow::create is emitted when a new window
is created.

Since: 2.2

</description>
<parameters>
<parameter name="object">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkWindow::deactivate">
<description>
The signal #AtkWindow::deactivate is emitted when a window is
no longer the active window of the application or session.

Since: 2.2

</description>
<parameters>
<parameter name="object">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkWindow::destroy">
<description>
The signal #AtkWindow::destroy is emitted when a window is
destroyed.

Since: 2.2

</description>
<parameters>
<parameter name="object">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkWindow::maximize">
<description>
The signal #AtkWindow::maximize is emitted when a window
is maximized.

Since: 2.2

</description>
<parameters>
<parameter name="object">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkWindow::minimize">
<description>
The signal #AtkWindow::minimize is emitted when a window
is minimized.

Since: 2.2

</description>
<parameters>
<parameter name="object">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkWindow::move">
<description>
The signal #AtkWindow::move is emitted when a window
is moved.

Since: 2.2

</description>
<parameters>
<parameter name="object">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkWindow::resize">
<description>
The signal #AtkWindow::resize is emitted when a window
is resized.

Since: 2.2

</description>
<parameters>
<parameter name="object">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<signal name="AtkWindow::restore">
<description>
The signal #AtkWindow::restore is emitted when a window
is restored.

Since: 2.2

</description>
<parameters>
<parameter name="object">
<parameter_description> the object which received the signal
</parameter_description>
</parameter>
</parameters>
<return></return>
</signal>

<function name="atk_action_do_action">
<description>
Perform the specified action on the object.


</description>
<parameters>
<parameter name="action">
<parameter_description> a #GObject instance that implements AtkActionIface
</parameter_description>
</parameter>
<parameter name="i">
<parameter_description> the action index corresponding to the action to be performed 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if success, %FALSE otherwise

</return>
</function>

<function name="atk_action_get_description">
<description>
Returns a description of the specified action of the object.


</description>
<parameters>
<parameter name="action">
<parameter_description> a #GObject instance that implements AtkActionIface
</parameter_description>
</parameter>
<parameter name="i">
<parameter_description> the action index corresponding to the action to be performed 
</parameter_description>
</parameter>
</parameters>
<return> a description string, or %NULL if @action does
not implement this interface.
</return>
</function>

<function name="atk_action_get_keybinding">
<description>
Gets the keybinding which can be used to activate this action, if one
exists. The string returned should contain localized, human-readable,
key sequences as they would appear when displayed on screen. It must
be in the format &quot;mnemonic;sequence;shortcut&quot;.

- The mnemonic key activates the object if it is presently enabled onscreen.
This typically corresponds to the underlined letter within the widget.
Example: &quot;n&quot; in a traditional &quot;New...&quot; menu item or the &quot;a&quot; in &quot;Apply&quot; for
a button.
- The sequence is the full list of keys which invoke the action even if the
relevant element is not currently shown on screen. For instance, for a menu
item the sequence is the keybindings used to open the parent menus before
invoking. The sequence string is colon-delimited. Example: &quot;Alt+F:N&quot; in a
traditional &quot;New...&quot; menu item.
- The shortcut, if it exists, will invoke the same action without showing
the component or its enclosing menus or dialogs. Example: &quot;Ctrl+N&quot; in a
traditional &quot;New...&quot; menu item.

Example: For a traditional &quot;New...&quot; menu item, the expected return value
would be: &quot;N;Alt+F:N;Ctrl+N&quot; for the English locale and &quot;N;Alt+D:N;Strg+N&quot;
for the German locale. If, hypothetically, this menu item lacked a mnemonic,
it would be represented by &quot;;;Ctrl+N&quot; and &quot;;;Strg+N&quot; respectively.


</description>
<parameters>
<parameter name="action">
<parameter_description> a #GObject instance that implements AtkActionIface
</parameter_description>
</parameter>
<parameter name="i">
<parameter_description> the action index corresponding to the action to be performed
</parameter_description>
</parameter>
</parameters>
<return> the keybinding which can be used to activate
this action, or %NULL if there is no keybinding for this action.

</return>
</function>

<function name="atk_action_get_localized_name">
<description>
Returns the localized name of the specified action of the object.


</description>
<parameters>
<parameter name="action">
<parameter_description> a #GObject instance that implements AtkActionIface
</parameter_description>
</parameter>
<parameter name="i">
<parameter_description> the action index corresponding to the action to be performed 
</parameter_description>
</parameter>
</parameters>
<return> a name string, or %NULL if @action does not
implement this interface.
</return>
</function>

<function name="atk_action_get_n_actions">
<description>
Gets the number of accessible actions available on the object.
If there are more than one, the first one is considered the
&quot;default&quot; action of the object.


</description>
<parameters>
<parameter name="action">
<parameter_description> a #GObject instance that implements AtkActionIface
</parameter_description>
</parameter>
</parameters>
<return> a the number of actions, or 0 if @action does not
implement this interface.
</return>
</function>

<function name="atk_action_get_name">
<description>
Returns a non-localized string naming the specified action of the 
object. This name is generally not descriptive of the end result 
of the action, but instead names the 'interaction type' which the 
object supports. By convention, the above strings should be used to 
represent the actions which correspond to the common point-and-click 
interaction techniques of the same name: i.e. 
&quot;click&quot;, &quot;press&quot;, &quot;release&quot;, &quot;drag&quot;, &quot;drop&quot;, &quot;popup&quot;, etc.
The &quot;popup&quot; action should be used to pop up a context menu for the 
object, if one exists.

For technical reasons, some toolkits cannot guarantee that the 
reported action is actually 'bound' to a nontrivial user event;
i.e. the result of some actions via atk_action_do_action() may be
NIL.


</description>
<parameters>
<parameter name="action">
<parameter_description> a #GObject instance that implements AtkActionIface
</parameter_description>
</parameter>
<parameter name="i">
<parameter_description> the action index corresponding to the action to be performed 
</parameter_description>
</parameter>
</parameters>
<return> a name string, or %NULL if @action does not
implement this interface.
</return>
</function>

<function name="atk_action_set_description">
<description>
Sets a description of the specified action of the object.


</description>
<parameters>
<parameter name="action">
<parameter_description> a #GObject instance that implements AtkActionIface
</parameter_description>
</parameter>
<parameter name="i">
<parameter_description> the action index corresponding to the action to be performed 
</parameter_description>
</parameter>
<parameter name="desc">
<parameter_description> the description to be assigned to this action
</parameter_description>
</parameter>
</parameters>
<return> a gboolean representing if the description was successfully set;
</return>
</function>

<function name="atk_add_focus_tracker">
<description>
Adds the specified function to the list of functions to be called
when an object receives focus.

Deprecated: 2.9.4: Focus tracking has been dropped as a feature
to be implemented by ATK itself. If you need focus tracking on your
implementation, subscribe to the #AtkObject::state-change &quot;focused&quot; signal.


</description>
<parameters>
<parameter name="focus_tracker">
<parameter_description> Function to be added to the list of functions to be called
when an object receives focus.
</parameter_description>
</parameter>
</parameters>
<return> added focus tracker id, or 0 on failure.
</return>
</function>

<function name="atk_add_global_event_listener">
<description>
Adds the specified function to the list of functions to be called
when an ATK event of type event_type occurs.

The format of event_type is the following:
&quot;ATK:&lt;atk_type&gt;:&lt;atk_event&gt;:&lt;atk_event_detail&gt;

Where &quot;ATK&quot; works as the namespace, &lt;atk_interface&gt; is the name of
the ATK type (interface or object), &lt;atk_event&gt; is the name of the
signal defined on that interface and &lt;atk_event_detail&gt; is the
gsignal detail of that signal. You can find more info about gsignal
details here:
http://developer.gnome.org/gobject/stable/gobject-Signals.html

The first three parameters are mandatory. The last one is optional.

For example:
ATK:AtkObject:state-change
ATK:AtkText:text-selection-changed
ATK:AtkText:text-insert:system

Toolkit implementor note: ATK provides a default implementation for
this virtual method. ATK implementors are discouraged from
reimplementing this method.

Toolkit implementor note: this method is not intended to be used by
ATK implementors but by ATK consumers.

ATK consumers note: as this method adds a listener for a given ATK
type, that type should be already registered on the GType system
before calling this method. A simple way to do that is creating an
instance of #AtkNoOpObject. This class implements all ATK
interfaces, so creating the instance will register all ATK types as
a collateral effect.


</description>
<parameters>
<parameter name="listener">
<parameter_description> the listener to notify
</parameter_description>
</parameter>
<parameter name="event_type">
<parameter_description> the type of event for which notification is requested
</parameter_description>
</parameter>
</parameters>
<return> added event listener id, or 0 on failure.
</return>
</function>

<function name="atk_add_key_event_listener">
<description>
Adds the specified function to the list of functions to be called
when a key event occurs.  The @data element will be passed to the
#AtkKeySnoopFunc (@listener) as the @func_data param, on notification.


</description>
<parameters>
<parameter name="listener">
<parameter_description> the listener to notify
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #gpointer that points to a block of data that should be sent to the registered listeners,
along with the event notification, when it occurs.  
</parameter_description>
</parameter>
</parameters>
<return> added event listener id, or 0 on failure.
</return>
</function>

<function name="atk_attribute_set_free">
<description>
Frees the memory used by an #AtkAttributeSet, including all its
#AtkAttributes.

</description>
<parameters>
<parameter name="attrib_set">
<parameter_description> The #AtkAttributeSet to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_component_add_focus_handler">
<description>
Add the specified handler to the set of functions to be called 
when this object receives focus events (in or out). If the handler is
already added it is not added again

Deprecated: 2.9.4: If you need to track when an object gains or
lose the focus, use the #AtkObject::state-change &quot;focused&quot; notification instead.


</description>
<parameters>
<parameter name="component">
<parameter_description> The #AtkComponent to attach the @handler to
</parameter_description>
</parameter>
<parameter name="handler">
<parameter_description> The #AtkFocusHandler to be attached to @component
</parameter_description>
</parameter>
</parameters>
<return> a handler id which can be used in atk_component_remove_focus_handler()
or zero if the handler was already added.
</return>
</function>

<function name="atk_component_contains">
<description>
Checks whether the specified point is within the extent of the @component.

Toolkit implementor note: ATK provides a default implementation for
this virtual method. In general there are little reason to
re-implement it.


</description>
<parameters>
<parameter name="component">
<parameter_description> the #AtkComponent
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate
</parameter_description>
</parameter>
<parameter name="coord_type">
<parameter_description> specifies whether the coordinates are relative to the screen
or to the components top level window
</parameter_description>
</parameter>
</parameters>
<return> %TRUE or %FALSE indicating whether the specified point is within
the extent of the @component or not
</return>
</function>

<function name="atk_component_get_alpha">
<description>
Returns the alpha value (i.e. the opacity) for this
@component, on a scale from 0 (fully transparent) to 1.0
(fully opaque).

Since: 1.12

</description>
<parameters>
<parameter name="component">
<parameter_description> an #AtkComponent
</parameter_description>
</parameter>
</parameters>
<return> An alpha value from 0 to 1.0, inclusive.
</return>
</function>

<function name="atk_component_get_extents">
<description>
Gets the rectangle which gives the extent of the @component.


</description>
<parameters>
<parameter name="component">
<parameter_description> an #AtkComponent
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> address of #gint to put x coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> address of #gint to put y coordinate
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> address of #gint to put width
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> address of #gint to put height
</parameter_description>
</parameter>
<parameter name="coord_type">
<parameter_description> specifies whether the coordinates are relative to the screen
or to the components top level window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_component_get_layer">
<description>
Gets the layer of the component.


</description>
<parameters>
<parameter name="component">
<parameter_description> an #AtkComponent
</parameter_description>
</parameter>
</parameters>
<return> an #AtkLayer which is the layer of the component
</return>
</function>

<function name="atk_component_get_mdi_zorder">
<description>
Gets the zorder of the component. The value G_MININT will be returned 
if the layer of the component is not ATK_LAYER_MDI or ATK_LAYER_WINDOW.


</description>
<parameters>
<parameter name="component">
<parameter_description> an #AtkComponent
</parameter_description>
</parameter>
</parameters>
<return> a gint which is the zorder of the component, i.e. the depth at 
which the component is shown in relation to other components in the same 
container.
</return>
</function>

<function name="atk_component_get_position">
<description>
Gets the position of @component in the form of 
a point specifying @component's top-left corner.

Deprecated: Since 2.12. Use atk_component_get_extents() instead.

</description>
<parameters>
<parameter name="component">
<parameter_description> an #AtkComponent
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> address of #gint to put x coordinate position
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> address of #gint to put y coordinate position
</parameter_description>
</parameter>
<parameter name="coord_type">
<parameter_description> specifies whether the coordinates are relative to the screen
or to the components top level window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_component_get_size">
<description>
Gets the size of the @component in terms of width and height.

Deprecated: Since 2.12. Use atk_component_get_extents() instead.

</description>
<parameters>
<parameter name="component">
<parameter_description> an #AtkComponent
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> address of #gint to put width of @component
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> address of #gint to put height of @component
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_component_grab_focus">
<description>
Grabs focus for this @component.


</description>
<parameters>
<parameter name="component">
<parameter_description> an #AtkComponent
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful, %FALSE otherwise.
</return>
</function>

<function name="atk_component_ref_accessible_at_point">
<description>
Gets a reference to the accessible child, if one exists, at the
coordinate point specified by @x and @y.


</description>
<parameters>
<parameter name="component">
<parameter_description> the #AtkComponent
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate
</parameter_description>
</parameter>
<parameter name="coord_type">
<parameter_description> specifies whether the coordinates are relative to the screen
or to the components top level window
</parameter_description>
</parameter>
</parameters>
<return> a reference to the accessible
child, if one exists
</return>
</function>

<function name="atk_component_remove_focus_handler">
<description>
Remove the handler specified by @handler_id from the list of
functions to be executed when this object receives focus events 
(in or out).

Deprecated: 2.9.4: If you need to track when an object gains or
lose the focus, use the #AtkObject::state-change &quot;focused&quot; notification instead.


</description>
<parameters>
<parameter name="component">
<parameter_description> the #AtkComponent to remove the focus handler from
</parameter_description>
</parameter>
<parameter name="handler_id">
<parameter_description> the handler id of the focus handler to be removed
from @component
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_component_set_extents">
<description>
Sets the extents of @component.


</description>
<parameters>
<parameter name="component">
<parameter_description> an #AtkComponent
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width to set for @component
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height to set for @component
</parameter_description>
</parameter>
<parameter name="coord_type">
<parameter_description> specifies whether the coordinates are relative to the screen
or to the components top level window
</parameter_description>
</parameter>
</parameters>
<return> %TRUE or %FALSE whether the extents were set or not
</return>
</function>

<function name="atk_component_set_position">
<description>
Sets the postition of @component.


</description>
<parameters>
<parameter name="component">
<parameter_description> an #AtkComponent
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> x coordinate
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> y coordinate
</parameter_description>
</parameter>
<parameter name="coord_type">
<parameter_description> specifies whether the coordinates are relative to the screen
or to the components top level window
</parameter_description>
</parameter>
</parameters>
<return> %TRUE or %FALSE whether or not the position was set or not
</return>
</function>

<function name="atk_component_set_size">
<description>
Set the size of the @component in terms of width and height.


</description>
<parameters>
<parameter name="component">
<parameter_description> an #AtkComponent
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> width to set for @component
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> height to set for @component
</parameter_description>
</parameter>
</parameters>
<return> %TRUE or %FALSE whether the size was set or not
</return>
</function>

<function name="atk_document_get_attribute_value">
<description>
Since: 1.12


</description>
<parameters>
<parameter name="document">
<parameter_description> a #GObject instance that implements AtkDocumentIface
</parameter_description>
</parameter>
<parameter name="attribute_name">
<parameter_description> a character string representing the name of the attribute
whose value is being queried.
</parameter_description>
</parameter>
</parameters>
<return> a string value associated with the named
attribute for this document, or NULL if a value for
#attribute_name has not been specified for this document.
</return>
</function>

<function name="atk_document_get_attributes">
<description>
Gets an AtkAttributeSet which describes document-wide
attributes as name-value pairs.

Since: 1.12


</description>
<parameters>
<parameter name="document">
<parameter_description> a #GObject instance that implements AtkDocumentIface
</parameter_description>
</parameter>
</parameters>
<return> An AtkAttributeSet containing the explicitly
set name-value-pair attributes associated with this document
as a whole.
</return>
</function>

<function name="atk_document_get_current_page_number">
<description>
Since: 2.12


</description>
<parameters>
<parameter name="document">
<parameter_description> the #AtkDocument
</parameter_description>
</parameter>
</parameters>
<return> current page number inside @document. -1 if not
implemented, not know by the implementor or irrelevant.
</return>
</function>

<function name="atk_document_get_document">
<description>
Gets a %gpointer that points to an instance of the DOM.  It is
up to the caller to check atk_document_get_type to determine
how to cast this pointer.

Deprecated: Since 2.12. @document is already a representation of
the document. Use it directly, or one of its children, as an
instance of the DOM.


</description>
<parameters>
<parameter name="document">
<parameter_description> a #GObject instance that implements AtkDocumentIface
</parameter_description>
</parameter>
</parameters>
<return> a %gpointer that points to an instance of the DOM.
</return>
</function>

<function name="atk_document_get_document_type">
<description>
Gets a string indicating the document type.

Deprecated: Since 2.12. Please use atk_document_get_attributes() to
ask for the document type if it applies.


</description>
<parameters>
<parameter name="document">
<parameter_description> a #GObject instance that implements AtkDocumentIface
</parameter_description>
</parameter>
</parameters>
<return> a string indicating the document type
</return>
</function>

<function name="atk_document_get_locale">
<description>
Gets a UTF-8 string indicating the POSIX-style LC_MESSAGES locale
of the content of this document instance.  Individual
text substrings or images within this document may have
a different locale, see atk_text_get_attributes and
atk_image_get_image_locale.

Deprecated: 2.7.90: Please use atk_object_get_object_locale() instead.


</description>
<parameters>
<parameter name="document">
<parameter_description> a #GObject instance that implements AtkDocumentIface
</parameter_description>
</parameter>
</parameters>
<return> a UTF-8 string indicating the POSIX-style LC_MESSAGES
locale of the document content as a whole, or NULL if
the document content does not specify a locale.
</return>
</function>

<function name="atk_document_get_page_count">
<description>
Since: 2.12


</description>
<parameters>
<parameter name="document">
<parameter_description> the #AtkDocument
</parameter_description>
</parameter>
</parameters>
<return> total page count of @document. -1 if not implemented, not
know by the implementor or irrelevant.
</return>
</function>

<function name="atk_document_set_attribute_value">
<description>
Since: 1.12


</description>
<parameters>
<parameter name="document">
<parameter_description> a #GObject instance that implements AtkDocumentIface
</parameter_description>
</parameter>
<parameter name="attribute_name">
<parameter_description> a character string representing the name of the attribute
whose value is being set.
</parameter_description>
</parameter>
<parameter name="attribute_value">
<parameter_description> a string value to be associated with #attribute_name.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if #value is successfully associated with #attribute_name
for this document, FALSE otherwise (e.g. if the document does not
allow the attribute to be modified).
</return>
</function>

<function name="atk_editable_text_copy_text">
<description>
Copy text from @start_pos up to, but not including @end_pos 
to the clipboard.

</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkEditableText
</parameter_description>
</parameter>
<parameter name="start_pos">
<parameter_description> start position
</parameter_description>
</parameter>
<parameter name="end_pos">
<parameter_description> end position
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_editable_text_cut_text">
<description>
Copy text from @start_pos up to, but not including @end_pos
to the clipboard and then delete from the widget.

</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkEditableText
</parameter_description>
</parameter>
<parameter name="start_pos">
<parameter_description> start position
</parameter_description>
</parameter>
<parameter name="end_pos">
<parameter_description> end position
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_editable_text_delete_text">
<description>
Delete text @start_pos up to, but not including @end_pos.

</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkEditableText
</parameter_description>
</parameter>
<parameter name="start_pos">
<parameter_description> start position
</parameter_description>
</parameter>
<parameter name="end_pos">
<parameter_description> end position
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_editable_text_insert_text">
<description>
Insert text at a given position.

</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkEditableText
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> the text to insert
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of text to insert, in bytes
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> The caller initializes this to 
the position at which to insert the text. After the call it
points at the position after the newly inserted text.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_editable_text_paste_text">
<description>
Paste text from clipboard to specified @position.

</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkEditableText
</parameter_description>
</parameter>
<parameter name="position">
<parameter_description> position to paste
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_editable_text_set_run_attributes">
<description>
Sets the attributes for a specified range. See the ATK_ATTRIBUTE
macros (such as #ATK_ATTRIBUTE_LEFT_MARGIN) for examples of attributes 
that can be set. Note that other attributes that do not have corresponding
ATK_ATTRIBUTE macros may also be set for certain text widgets.


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkEditableText
</parameter_description>
</parameter>
<parameter name="attrib_set">
<parameter_description> an #AtkAttributeSet
</parameter_description>
</parameter>
<parameter name="start_offset">
<parameter_description> start of range in which to set attributes
</parameter_description>
</parameter>
<parameter name="end_offset">
<parameter_description> end of range in which to set attributes
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if attributes successfully set for the specified
range, otherwise %FALSE
</return>
</function>

<function name="atk_editable_text_set_text_contents">
<description>
Set text contents of @text.

</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkEditableText
</parameter_description>
</parameter>
<parameter name="string">
<parameter_description> string to set for text contents of @text
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_focus_tracker_init">
<description>
Specifies the function to be called for focus tracker initialization.
This function should be called by an implementation of the
ATK interface if any specific work needs to be done to enable
focus tracking.

Deprecated: 2.9.4: Focus tracking has been dropped as a feature
to be implemented by ATK itself.


</description>
<parameters>
<parameter name="init">
<parameter_description> Function to be called for focus tracker initialization
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_focus_tracker_notify">
<description>
Cause the focus tracker functions which have been specified to be
executed for the object.

Deprecated: 2.9.4: Focus tracking has been dropped as a feature
to be implemented by ATK itself. As #AtkObject::focus-event was
deprecated in favor of a #AtkObject::state-change signal, in order
to notify a focus change on your implementation, you can use
atk_object_notify_state_change() instead.

</description>
<parameters>
<parameter name="object">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_get_binary_age">
<description>
Returns the binary age as passed to libtool when building the ATK
library the process is running against.

Since: 2.8

</description>
<parameters>
</parameters>
<return> the binary age of the ATK library

</return>
</function>

<function name="atk_get_default_registry">
<description>
Gets a default implementation of the #AtkObjectFactory/type
registry.
Note: For most toolkit maintainers, this will be the correct
registry for registering new #AtkObject factories. Following
a call to this function, maintainers may call atk_registry_set_factory_type()
to associate an #AtkObjectFactory subclass with the GType of objects
for whom accessibility information will be provided.


</description>
<parameters>
</parameters>
<return> a default implementation of the
#AtkObjectFactory/type registry
</return>
</function>

<function name="atk_get_focus_object">
<description>
Gets the currently focused object.

Since: 1.6


</description>
<parameters>
</parameters>
<return> the currently focused object for the current
application
</return>
</function>

<function name="atk_get_interface_age">
<description>
Returns the interface age as passed to libtool when building the
ATK library the process is running against.

Since: 2.8

</description>
<parameters>
</parameters>
<return> the interface age of the ATK library

</return>
</function>

<function name="atk_get_major_version">
<description>
Returns the major version number of the ATK library.  (e.g. in ATK
version 2.7.4 this is 2.)

This function is in the library, so it represents the ATK library
your code is running against. In contrast, the #ATK_MAJOR_VERSION
macro represents the major version of the ATK headers you have
included when compiling your code.

Since: 2.8

</description>
<parameters>
</parameters>
<return> the major version number of the ATK library

</return>
</function>

<function name="atk_get_micro_version">
<description>
Returns the micro version number of the ATK library.  (e.g. in ATK
version 2.7.4 this is 4.)

This function is in the library, so it represents the ATK library
your code is are running against. In contrast, the
#ATK_MICRO_VERSION macro represents the micro version of the ATK
headers you have included when compiling your code.

Since: 2.8

</description>
<parameters>
</parameters>
<return> the micro version number of the ATK library

</return>
</function>

<function name="atk_get_minor_version">
<description>
Returns the minor version number of the ATK library.  (e.g. in ATK
version 2.7.4 this is 7.)

This function is in the library, so it represents the ATK library
your code is are running against. In contrast, the
#ATK_MINOR_VERSION macro represents the minor version of the ATK
headers you have included when compiling your code.

Since: 2.8

</description>
<parameters>
</parameters>
<return> the minor version number of the ATK library

</return>
</function>

<function name="atk_get_root">
<description>
Gets the root accessible container for the current application.


</description>
<parameters>
</parameters>
<return> the root accessible container for the current
application
</return>
</function>

<function name="atk_get_toolkit_name">
<description>
Gets name string for the GUI toolkit implementing ATK for this application.


</description>
<parameters>
</parameters>
<return> name string for the GUI toolkit implementing ATK for this application
</return>
</function>

<function name="atk_get_toolkit_version">
<description>
Gets version string for the GUI toolkit implementing ATK for this application.


</description>
<parameters>
</parameters>
<return> version string for the GUI toolkit implementing ATK for this application
</return>
</function>

<function name="atk_get_version">
<description>
Gets the current version for ATK.

Since: 1.20

</description>
<parameters>
</parameters>
<return> version string for ATK

</return>
</function>

<function name="atk_gobject_accessible_for_object">
<description>
Gets the accessible object for the specified @obj.


</description>
<parameters>
<parameter name="obj">
<parameter_description> a #GObject
</parameter_description>
</parameter>
</parameters>
<return> a #AtkObject which is the accessible object for
the @obj
</return>
</function>

<function name="atk_gobject_accessible_get_object">
<description>
Gets the GObject for which @obj is the accessible object.


</description>
<parameters>
<parameter name="obj">
<parameter_description> a #AtkGObjectAccessible
</parameter_description>
</parameter>
</parameters>
<return> a #GObject which is the object for which @obj is
the accessible object
</return>
</function>

<function name="atk_hyperlink_get_end_index">
<description>
Gets the index with the hypertext document at which this link ends.


</description>
<parameters>
<parameter name="link_">
<parameter_description> an #AtkHyperlink
</parameter_description>
</parameter>
</parameters>
<return> the index with the hypertext document at which this link ends
</return>
</function>

<function name="atk_hyperlink_get_n_anchors">
<description>
Gets the number of anchors associated with this hyperlink.


</description>
<parameters>
<parameter name="link_">
<parameter_description> an #AtkHyperlink
</parameter_description>
</parameter>
</parameters>
<return> the number of anchors associated with this hyperlink
</return>
</function>

<function name="atk_hyperlink_get_object">
<description>
Returns the item associated with this hyperlinks nth anchor.
For instance, the returned #AtkObject will implement #AtkText
if @link_ is a text hyperlink, #AtkImage if @link_ is an image
hyperlink etc. 

Multiple anchors are primarily used by client-side image maps.


</description>
<parameters>
<parameter name="link_">
<parameter_description> an #AtkHyperlink
</parameter_description>
</parameter>
<parameter name="i">
<parameter_description> a (zero-index) integer specifying the desired anchor
</parameter_description>
</parameter>
</parameters>
<return> an #AtkObject associated with this hyperlinks
i-th anchor
</return>
</function>

<function name="atk_hyperlink_get_start_index">
<description>
Gets the index with the hypertext document at which this link begins.


</description>
<parameters>
<parameter name="link_">
<parameter_description> an #AtkHyperlink
</parameter_description>
</parameter>
</parameters>
<return> the index with the hypertext document at which this link begins
</return>
</function>

<function name="atk_hyperlink_get_uri">
<description>
Get a the URI associated with the anchor specified 
by @i of @link_. 

Multiple anchors are primarily used by client-side image maps.


</description>
<parameters>
<parameter name="link_">
<parameter_description> an #AtkHyperlink
</parameter_description>
</parameter>
<parameter name="i">
<parameter_description> a (zero-index) integer specifying the desired anchor
</parameter_description>
</parameter>
</parameters>
<return> a string specifying the URI 
</return>
</function>

<function name="atk_hyperlink_impl_get_hyperlink">
<description>
Gets the hyperlink associated with this object.

Since: 1.12

</description>
<parameters>
<parameter name="impl">
<parameter_description> a #GObject instance that implements AtkHyperlinkImplIface
</parameter_description>
</parameter>
</parameters>
<return>  an AtkHyperlink object which points to this
implementing AtkObject.

</return>
</function>

<function name="atk_hyperlink_is_inline">
<description>
Indicates whether the link currently displays some or all of its
content inline.  Ordinary HTML links will usually return
%FALSE, but an inline &lt;src&gt; HTML element will return
%TRUE.


</description>
<parameters>
<parameter name="link_">
<parameter_description> an #AtkHyperlink
</parameter_description>
</parameter>
</parameters>
<return> whether or not this link displays its content inline.

</return>
</function>

<function name="atk_hyperlink_is_selected_link">
<description>
Determines whether this AtkHyperlink is selected

Since: 1.4

Deprecated: 1.8: Please use ATK_STATE_FOCUSABLE for all links,
and ATK_STATE_FOCUSED for focused links.


</description>
<parameters>
<parameter name="link_">
<parameter_description> an #AtkHyperlink
</parameter_description>
</parameter>
</parameters>
<return> True if the AtkHyperlink is selected, False otherwise
</return>
</function>

<function name="atk_hyperlink_is_valid">
<description>
Since the document that a link is associated with may have changed
this method returns %TRUE if the link is still valid (with
respect to the document it references) and %FALSE otherwise.


</description>
<parameters>
<parameter name="link_">
<parameter_description> an #AtkHyperlink
</parameter_description>
</parameter>
</parameters>
<return> whether or not this link is still valid
</return>
</function>

<function name="atk_hypertext_get_link">
<description>
Gets the link in this hypertext document at index 
@link_index


</description>
<parameters>
<parameter name="hypertext">
<parameter_description> an #AtkHypertext
</parameter_description>
</parameter>
<parameter name="link_index">
<parameter_description> an integer specifying the desired link
</parameter_description>
</parameter>
</parameters>
<return> the link in this hypertext document at
index @link_index
</return>
</function>

<function name="atk_hypertext_get_link_index">
<description>
Gets the index into the array of hyperlinks that is associated with
the character specified by @char_index.


</description>
<parameters>
<parameter name="hypertext">
<parameter_description> an #AtkHypertext
</parameter_description>
</parameter>
<parameter name="char_index">
<parameter_description> a character index
</parameter_description>
</parameter>
</parameters>
<return> an index into the array of hyperlinks in @hypertext,
or -1 if there is no hyperlink associated with this character.
</return>
</function>

<function name="atk_hypertext_get_n_links">
<description>
Gets the number of links within this hypertext document.


</description>
<parameters>
<parameter name="hypertext">
<parameter_description> an #AtkHypertext
</parameter_description>
</parameter>
</parameters>
<return> the number of links within this hypertext document
</return>
</function>

<function name="atk_image_get_image_description">
<description>
Get a textual description of this image.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GObject instance that implements AtkImageIface
</parameter_description>
</parameter>
</parameters>
<return> a string representing the image description
</return>
</function>

<function name="atk_image_get_image_locale">
<description>
Since: 1.12


</description>
<parameters>
<parameter name="image">
<parameter_description> An #AtkImage
</parameter_description>
</parameter>
</parameters>
<return> a string corresponding to the POSIX
LC_MESSAGES locale used by the image description, or %NULL if the
image does not specify a locale.

</return>
</function>

<function name="atk_image_get_image_position">
<description>
Gets the position of the image in the form of a point specifying the
images top-left corner.

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GObject instance that implements AtkImageIface
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> address of #gint to put x coordinate position; otherwise, -1 if value cannot be obtained.
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> address of #gint to put y coordinate position; otherwise, -1 if value cannot be obtained.
</parameter_description>
</parameter>
<parameter name="coord_type">
<parameter_description> specifies whether the coordinates are relative to the screen
or to the components top level window
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_image_get_image_size">
<description>
Get the width and height in pixels for the specified image.
The values of @width and @height are returned as -1 if the
values cannot be obtained (for instance, if the object is not onscreen).

</description>
<parameters>
<parameter name="image">
<parameter_description> a #GObject instance that implements AtkImageIface
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> filled with the image width, or -1 if the value cannot be obtained.
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> filled with the image height, or -1 if the value cannot be obtained.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_image_set_image_description">
<description>
Sets the textual description for this image.


</description>
<parameters>
<parameter name="image">
<parameter_description> a #GObject instance that implements AtkImageIface
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> a string description to set for @image
</parameter_description>
</parameter>
</parameters>
<return> boolean TRUE, or FALSE if operation could
not be completed.
</return>
</function>

<function name="atk_implementor_ref_accessible">
<description>
Gets a reference to an object's #AtkObject implementation, if
the object implements #AtkObjectIface


</description>
<parameters>
<parameter name="implementor">
<parameter_description> The #GObject instance which should implement #AtkImplementorIface
if a non-null return value is required.
</parameter_description>
</parameter>
</parameters>
<return> a reference to an object's #AtkObject
implementation
</return>
</function>

<function name="atk_misc_get_instance">
<description>
Obtain the singleton instance of AtkMisc for this application.

Since: 1.13

Deprecated: Since 2.12.


</description>
<parameters>
</parameters>
<return> The singleton instance of AtkMisc for this application.

</return>
</function>

<function name="atk_misc_threads_enter">
<description>
Take the thread mutex for the GUI toolkit, 
if one exists. 
(This method is implemented by the toolkit ATK implementation layer;
for instance, for GTK+, GAIL implements this via GDK_THREADS_ENTER).

Deprecated: Since 2.12.

Since: 1.13


</description>
<parameters>
<parameter name="misc">
<parameter_description> an AtkMisc instance for this application. 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_misc_threads_leave">
<description>
Release the thread mutex for the GUI toolkit, 
if one exists. This method, and atk_misc_threads_enter, 
are needed in some situations by threaded application code which 
services ATK requests, since fulfilling ATK requests often
requires calling into the GUI toolkit.  If a long-running or
potentially blocking call takes place inside such a block, it should
be bracketed by atk_misc_threads_leave/atk_misc_threads_enter calls.
(This method is implemented by the toolkit ATK implementation layer;
for instance, for GTK+, GAIL implements this via GDK_THREADS_LEAVE).

Deprecated: Since 2.12.

Since: 1.13


</description>
<parameters>
<parameter name="misc">
<parameter_description> an AtkMisc instance for this application. 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_no_op_object_factory_new">
<description>
Creates an instance of an #AtkObjectFactory which generates primitive
(non-functioning) #AtkObjects. 


</description>
<parameters>
</parameters>
<return> an instance of an #AtkObjectFactory
</return>
</function>

<function name="atk_no_op_object_new">
<description>
Provides a default (non-functioning stub) #AtkObject.
Application maintainers should not use this method. 


</description>
<parameters>
<parameter name="obj">
<parameter_description> a #GObject
</parameter_description>
</parameter>
</parameters>
<return> a default (non-functioning stub) #AtkObject
</return>
</function>

<function name="atk_object_add_relationship">
<description>
Adds a relationship of the specified type with the specified target.


</description>
<parameters>
<parameter name="object">
<parameter_description> The #AtkObject to which an AtkRelation is to be added. 
</parameter_description>
</parameter>
<parameter name="relationship">
<parameter_description> The #AtkRelationType of the relation
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> The #AtkObject which is to be the target of the relation.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the relationship is added.
</return>
</function>

<function name="atk_object_connect_property_change_handler">
<description>
Deprecated: Since 2.12. Connect directly to property-change or
notify signals.


</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
<parameter name="handler">
<parameter_description> a function to be called when a property changes its value
</parameter_description>
</parameter>
</parameters>
<return> a #guint which is the handler id used in 
atk_object_remove_property_change_handler()
</return>
</function>

<function name="atk_object_factory_create_accessible">
<description>
Provides an #AtkObject that implements an accessibility interface 
on behalf of @obj


</description>
<parameters>
<parameter name="factory">
<parameter_description> The #AtkObjectFactory associated with @obj's
object type
</parameter_description>
</parameter>
<parameter name="obj">
<parameter_description> a #GObject 
</parameter_description>
</parameter>
</parameters>
<return> an #AtkObject that implements an accessibility
interface on behalf of @obj
</return>
</function>

<function name="atk_object_factory_get_accessible_type">
<description>
Gets the GType of the accessible which is created by the factory. 

</description>
<parameters>
<parameter name="factory">
<parameter_description> an #AtkObjectFactory 
</parameter_description>
</parameter>
</parameters>
<return> the type of the accessible which is created by the @factory.
The value G_TYPE_INVALID is returned if no type if found.
</return>
</function>

<function name="atk_object_factory_invalidate">
<description>
Inform @factory that it is no longer being used to create
accessibles. When called, @factory may need to inform
#AtkObjects which it has created that they need to be re-instantiated.
Note: primarily used for runtime replacement of #AtkObjectFactorys
in object registries.

</description>
<parameters>
<parameter name="factory">
<parameter_description> an #AtkObjectFactory to invalidate
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_object_get_attributes">
<description>
Get a list of properties applied to this object as a whole, as an #AtkAttributeSet consisting of 
name-value pairs. As such these attributes may be considered weakly-typed properties or annotations, 
as distinct from strongly-typed object data available via other get/set methods.
Not all objects have explicit &quot;name-value pair&quot; #AtkAttributeSet properties.

Since: 1.12


</description>
<parameters>
<parameter name="accessible">
<parameter_description> An #AtkObject.
</parameter_description>
</parameter>
</parameters>
<return> an #AtkAttributeSet consisting of all
explicit properties/annotations applied to the object, or an empty
set if the object has no name-value pair attributes assigned to
it. This #atkattributeset should be freed by a call to
atk_attribute_set_free().
</return>
</function>

<function name="atk_object_get_description">
<description>
Gets the accessible description of the accessible.


</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
</parameters>
<return> a character string representing the accessible description
of the accessible.

</return>
</function>

<function name="atk_object_get_index_in_parent">
<description>
Gets the 0-based index of this accessible in its parent; returns -1 if the
accessible does not have an accessible parent.


</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
</parameters>
<return> an integer which is the index of the accessible in its parent
</return>
</function>

<function name="atk_object_get_layer">
<description>
Gets the layer of the accessible.

Deprecated: Use atk_component_get_layer instead.


</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
</parameters>
<return> an #AtkLayer which is the layer of the accessible
</return>
</function>

<function name="atk_object_get_mdi_zorder">
<description>
Gets the zorder of the accessible. The value G_MININT will be returned 
if the layer of the accessible is not ATK_LAYER_MDI.

Deprecated: Use atk_component_get_mdi_zorder instead.


</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
</parameters>
<return> a gint which is the zorder of the accessible, i.e. the depth at 
which the component is shown in relation to other components in the same 
container.

</return>
</function>

<function name="atk_object_get_n_accessible_children">
<description>
Gets the number of accessible children of the accessible.


</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
</parameters>
<return> an integer representing the number of accessible children
of the accessible.
</return>
</function>

<function name="atk_object_get_name">
<description>
Gets the accessible name of the accessible.


</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
</parameters>
<return> a character string representing the accessible name of the object.
</return>
</function>

<function name="atk_object_get_object_locale">
<description>
Gets a UTF-8 string indicating the POSIX-style LC_MESSAGES locale
of @accessible.

Since: 2.8


</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
</parameters>
<return> a UTF-8 string indicating the POSIX-style LC_MESSAGES
locale of @accessible.
</return>
</function>

<function name="atk_object_get_parent">
<description>
Gets the accessible parent of the accessible. By default this is
the one assigned with atk_object_set_parent(), but it is assumed
that ATK implementors have ways to get the parent of the object
without the need of assigning it manually with
atk_object_set_parent(), and will return it with this method.

If you are only interested on the parent assigned with
atk_object_set_parent(), use atk_object_peek_parent().


</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
</parameters>
<return> an #AtkObject representing the accessible
parent of the accessible
</return>
</function>

<function name="atk_object_get_role">
<description>
Gets the role of the accessible.


</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
</parameters>
<return> an #AtkRole which is the role of the accessible
</return>
</function>

<function name="atk_object_initialize">
<description>
This function is called when implementing subclasses of #AtkObject.
It does initialization required for the new object. It is intended
that this function should called only in the ..._new() functions used
to create an instance of a subclass of #AtkObject

</description>
<parameters>
<parameter name="accessible">
<parameter_description> a #AtkObject
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #gpointer which identifies the object for which the AtkObject was created.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_object_notify_state_change">
<description>
Emits a state-change signal for the specified state.

Note that as a general rule when the state of an existing object changes,
emitting a notification is expected.

</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
<parameter name="state">
<parameter_description> an #AtkState whose state is changed
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a gboolean which indicates whether the state is being set on or off
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_object_peek_parent">
<description>
Gets the accessible parent of the accessible, if it has been
manually assigned with atk_object_set_parent. Otherwise, this
function returns %NULL.

This method is intended as an utility for ATK implementors, and not
to be exposed to accessible tools. See atk_object_get_parent() for
further reference.


</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
</parameters>
<return> an #AtkObject representing the accessible
parent of the accessible if assigned
</return>
</function>

<function name="atk_object_ref_accessible_child">
<description>
Gets a reference to the specified accessible child of the object.
The accessible children are 0-based so the first accessible child is
at index 0, the second at index 1 and so on.


</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
<parameter name="i">
<parameter_description> a gint representing the position of the child, starting from 0
</parameter_description>
</parameter>
</parameters>
<return> an #AtkObject representing the specified
accessible child of the accessible.
</return>
</function>

<function name="atk_object_ref_relation_set">
<description>
Gets the #AtkRelationSet associated with the object.


</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
</parameters>
<return> an #AtkRelationSet representing the relation set
of the object.
</return>
</function>

<function name="atk_object_ref_state_set">
<description>
Gets a reference to the state set of the accessible; the caller must
unreference it when it is no longer needed.


</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
</parameters>
<return> a reference to an #AtkStateSet which is the state
set of the accessible
</return>
</function>

<function name="atk_object_remove_property_change_handler">
<description>
Deprecated: Since 2.12.

Removes a property change handler.

</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
<parameter name="handler_id">
<parameter_description> a guint which identifies the handler to be removed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_object_remove_relationship">
<description>
Removes a relationship of the specified type with the specified target.


</description>
<parameters>
<parameter name="object">
<parameter_description> The #AtkObject from which an AtkRelation is to be removed. 
</parameter_description>
</parameter>
<parameter name="relationship">
<parameter_description> The #AtkRelationType of the relation
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> The #AtkObject which is the target of the relation to be removed.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the relationship is removed.
</return>
</function>

<function name="atk_object_set_description">
<description>
Sets the accessible description of the accessible. You can't set
the description to NULL. This is reserved for the initial value. In
this aspect NULL is similar to ATK_ROLE_UNKNOWN. If you want to set
the name to a empty value you can use &quot;&quot;.

</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> a character string to be set as the accessible description
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_object_set_name">
<description>
Sets the accessible name of the accessible. You can't set the name
to NULL. This is reserved for the initial value. In this aspect
NULL is similar to ATK_ROLE_UNKNOWN. If you want to set the name to
a empty value you can use &quot;&quot;.

</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> a character string to be set as the accessible name
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_object_set_parent">
<description>
Sets the accessible parent of the accessible. @parent can be NULL.

</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
<parameter name="parent">
<parameter_description> an #AtkObject to be set as the accessible parent
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_object_set_role">
<description>
Sets the role of the accessible.

</description>
<parameters>
<parameter name="accessible">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
<parameter name="role">
<parameter_description> an #AtkRole to be set as the role
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_plug_get_id">
<description>
Gets the unique ID of an #AtkPlug object, which can be used to
embed inside of an #AtkSocket using atk_socket_embed().

Internally, this calls a class function that should be registered
by the IPC layer (usually at-spi2-atk). The implementor of an
#AtkPlug object should call this function (after atk-bridge is
loaded) and pass the value to the process implementing the
#AtkSocket, so it could embed the plug.

Since: 1.30

</description>
<parameters>
<parameter name="plug">
<parameter_description> an #AtkPlug
</parameter_description>
</parameter>
</parameters>
<return> the unique ID for the plug

</return>
</function>

<function name="atk_range_copy">
<description>
Returns a new #AtkRange that is a exact copy of @src

Since: 2.12


</description>
<parameters>
<parameter name="src">
<parameter_description> #AtkRange to copy
</parameter_description>
</parameter>
</parameters>
<return> a new #AtkRange copy of @src
</return>
</function>

<function name="atk_range_free">
<description>
Free @range

Since: 2.12

</description>
<parameters>
<parameter name="range">
<parameter_description> #AtkRange to free
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_range_get_description">
<description>
Returns the human readable description of @range

Since: 2.12


</description>
<parameters>
<parameter name="range">
<parameter_description> an #AtkRange
</parameter_description>
</parameter>
</parameters>
<return> the human-readable description of @range
</return>
</function>

<function name="atk_range_get_lower_limit">
<description>
Returns the lower limit of @range

Since: 2.12


</description>
<parameters>
<parameter name="range">
<parameter_description> an #AtkRange
</parameter_description>
</parameter>
</parameters>
<return> the lower limit of @range
</return>
</function>

<function name="atk_range_get_upper_limit">
<description>
Returns the upper limit of @range

Since: 2.12


</description>
<parameters>
<parameter name="range">
<parameter_description> an #AtkRange
</parameter_description>
</parameter>
</parameters>
<return> the upper limit of @range
</return>
</function>

<function name="atk_range_new">
<description>
Creates a new #AtkRange.

Since: 2.12


</description>
<parameters>
<parameter name="lower_limit">
<parameter_description> inferior limit for this range
</parameter_description>
</parameter>
<parameter name="upper_limit">
<parameter_description> superior limit for this range
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> human readable description of this range.
</parameter_description>
</parameter>
</parameters>
<return> a new #AtkRange

</return>
</function>

<function name="atk_registry_get_factory">
<description>
Gets an #AtkObjectFactory appropriate for creating #AtkObjects
appropriate for @type.


</description>
<parameters>
<parameter name="registry">
<parameter_description> an #AtkRegistry
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GType with which to look up the associated #AtkObjectFactory
</parameter_description>
</parameter>
</parameters>
<return> an #AtkObjectFactory appropriate for creating
#AtkObjects appropriate for @type.
</return>
</function>

<function name="atk_registry_get_factory_type">
<description>
Provides a #GType indicating the #AtkObjectFactory subclass
associated with @type.


</description>
<parameters>
<parameter name="registry">
<parameter_description> an #AtkRegistry
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GType with which to look up the associated #AtkObjectFactory
subclass
</parameter_description>
</parameter>
</parameters>
<return> a #GType associated with type @type
</return>
</function>

<function name="atk_registry_set_factory_type">
<description>
Associate an #AtkObjectFactory subclass with a #GType. Note:
The associated @factory_type will thereafter be responsible for
the creation of new #AtkObject implementations for instances
appropriate for @type.

</description>
<parameters>
<parameter name="registry">
<parameter_description> the #AtkRegistry in which to register the type association
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> an #AtkObject type 
</parameter_description>
</parameter>
<parameter name="factory_type">
<parameter_description> an #AtkObjectFactory type to associate with @type.  Must
implement AtkObject appropriate for @type.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_relation_add_target">
<description>
Adds the specified AtkObject to the target for the relation, if it is
not already present.  See also atk_object_add_relationship().


Since: 1.9

</description>
<parameters>
<parameter name="relation">
<parameter_description> an #AtkRelation
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_relation_get_relation_type">
<description>
Gets the type of @relation


</description>
<parameters>
<parameter name="relation">
<parameter_description> an #AtkRelation 
</parameter_description>
</parameter>
</parameters>
<return> the type of @relation
</return>
</function>

<function name="atk_relation_get_target">
<description>
Gets the target list of @relation


</description>
<parameters>
<parameter name="relation">
<parameter_description> an #AtkRelation
</parameter_description>
</parameter>
</parameters>
<return> the target list of @relation
</return>
</function>

<function name="atk_relation_new">
<description>
Create a new relation for the specified key and the specified list
of targets.  See also atk_object_add_relationship().


</description>
<parameters>
<parameter name="targets">
<parameter_description> an array of pointers to
#AtkObjects
</parameter_description>
</parameter>
<parameter name="n_targets">
<parameter_description> number of #AtkObjects pointed to by @targets
</parameter_description>
</parameter>
<parameter name="relationship">
<parameter_description> an #AtkRelationType with which to create the new
#AtkRelation
</parameter_description>
</parameter>
</parameters>
<return> a pointer to a new #AtkRelation
</return>
</function>

<function name="atk_relation_remove_target">
<description>
Remove the specified AtkObject from the target for the relation.


</description>
<parameters>
<parameter name="relation">
<parameter_description> an #AtkRelation
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
</parameters>
<return> TRUE if the removal is successful.
</return>
</function>

<function name="atk_relation_set_add">
<description>
Add a new relation to the current relation set if it is not already
present.
This function ref's the AtkRelation so the caller of this function
should unref it to ensure that it will be destroyed when the AtkRelationSet
is destroyed.

</description>
<parameters>
<parameter name="set">
<parameter_description> an #AtkRelationSet
</parameter_description>
</parameter>
<parameter name="relation">
<parameter_description> an #AtkRelation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_relation_set_add_relation_by_type">
<description>
Add a new relation of the specified type with the specified target to 
the current relation set if the relation set does not contain a relation
of that type. If it is does contain a relation of that typea the target
is added to the relation.

Since: 1.9

</description>
<parameters>
<parameter name="set">
<parameter_description> an #AtkRelationSet
</parameter_description>
</parameter>
<parameter name="relationship">
<parameter_description> an #AtkRelationType
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_relation_set_contains">
<description>
Determines whether the relation set contains a relation that matches the
specified type.


</description>
<parameters>
<parameter name="set">
<parameter_description> an #AtkRelationSet
</parameter_description>
</parameter>
<parameter name="relationship">
<parameter_description> an #AtkRelationType
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @relationship is the relationship type of a relation
in @set, %FALSE otherwise
</return>
</function>

<function name="atk_relation_set_contains_target">
<description>
Determines whether the relation set contains a relation that
matches the specified pair formed by type @relationship and object
@target.


</description>
<parameters>
<parameter name="set">
<parameter_description> an #AtkRelationSet
</parameter_description>
</parameter>
<parameter name="relationship">
<parameter_description> an #AtkRelationType
</parameter_description>
</parameter>
<parameter name="target">
<parameter_description> an #AtkObject
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @set contains a relation with the relationship
type @relationship with an object @target, %FALSE otherwise
</return>
</function>

<function name="atk_relation_set_get_n_relations">
<description>
Determines the number of relations in a relation set.


</description>
<parameters>
<parameter name="set">
<parameter_description> an #AtkRelationSet
</parameter_description>
</parameter>
</parameters>
<return> an integer representing the number of relations in the set.
</return>
</function>

<function name="atk_relation_set_get_relation">
<description>
Determines the relation at the specified position in the relation set.


</description>
<parameters>
<parameter name="set">
<parameter_description> an #AtkRelationSet
</parameter_description>
</parameter>
<parameter name="i">
<parameter_description> a gint representing a position in the set, starting from 0.
</parameter_description>
</parameter>
</parameters>
<return> a #AtkRelation, which is the relation at
position i in the set.
</return>
</function>

<function name="atk_relation_set_get_relation_by_type">
<description>
Finds a relation that matches the specified type.


</description>
<parameters>
<parameter name="set">
<parameter_description> an #AtkRelationSet
</parameter_description>
</parameter>
<parameter name="relationship">
<parameter_description> an #AtkRelationType
</parameter_description>
</parameter>
</parameters>
<return> an #AtkRelation, which is a relation matching the
specified type.
</return>
</function>

<function name="atk_relation_set_new">
<description>
Creates a new empty relation set.


</description>
<parameters>
</parameters>
<return> a new #AtkRelationSet 
</return>
</function>

<function name="atk_relation_set_remove">
<description>
Removes a relation from the relation set.
This function unref's the #AtkRelation so it will be deleted unless there
is another reference to it.

</description>
<parameters>
<parameter name="set">
<parameter_description> an #AtkRelationSet
</parameter_description>
</parameter>
<parameter name="relation">
<parameter_description> an #AtkRelation
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_relation_type_for_name">
<description>
Get the #AtkRelationType type corresponding to a relation name.


</description>
<parameters>
<parameter name="name">
<parameter_description> a string which is the (non-localized) name of an ATK relation type.
</parameter_description>
</parameter>
</parameters>
<return> the #AtkRelationType enumerated type corresponding to the specified name,
or #ATK_RELATION_NULL if no matching relation type is found.
</return>
</function>

<function name="atk_relation_type_get_name">
<description>
Gets the description string describing the #AtkRelationType @type.


</description>
<parameters>
<parameter name="type">
<parameter_description> The #AtkRelationType whose name is required
</parameter_description>
</parameter>
</parameters>
<return> the string describing the AtkRelationType
</return>
</function>

<function name="atk_relation_type_register">
<description>
Associate @name with a new #AtkRelationType
 

</description>
<parameters>
<parameter name="name">
<parameter_description> a name string
</parameter_description>
</parameter>
</parameters>
<return> an #AtkRelationType associated with @name
</return>
</function>

<function name="atk_remove_focus_tracker">
<description>
Deprecated: 2.9.4: Focus tracking has been dropped as a feature
to be implemented by ATK itself. If you need focus tracking on your
implementation, subscribe to the #AtkObject::state-change &quot;focused&quot; signal.

Removes the specified focus tracker from the list of functions
to be called when any object receives focus.

</description>
<parameters>
<parameter name="tracker_id">
<parameter_description> the id of the focus tracker to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_remove_global_event_listener">
<description>
@listener_id is the value returned by #atk_add_global_event_listener
when you registered that event listener.

Toolkit implementor note: ATK provides a default implementation for
this virtual method. ATK implementors are discouraged from
reimplementing this method.

Toolkit implementor note: this method is not intended to be used by
ATK implementors but by ATK consumers.

Removes the specified event listener

</description>
<parameters>
<parameter name="listener_id">
<parameter_description> the id of the event listener to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_remove_key_event_listener">
<description>
@listener_id is the value returned by #atk_add_key_event_listener
when you registered that event listener.

Removes the specified event listener.

</description>
<parameters>
<parameter name="listener_id">
<parameter_description> the id of the event listener to remove
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_role_for_name">
<description>
Get the #AtkRole type corresponding to a rolew name.


</description>
<parameters>
<parameter name="name">
<parameter_description> a string which is the (non-localized) name of an ATK role.
</parameter_description>
</parameter>
</parameters>
<return> the #AtkRole enumerated type corresponding to the specified name,
or #ATK_ROLE_INVALID if no matching role is found.
</return>
</function>

<function name="atk_role_get_localized_name">
<description>
Gets the localized description string describing the #AtkRole @role.


</description>
<parameters>
<parameter name="role">
<parameter_description> The #AtkRole whose localized name is required
</parameter_description>
</parameter>
</parameters>
<return> the localized string describing the AtkRole
</return>
</function>

<function name="atk_role_get_name">
<description>
Gets the description string describing the #AtkRole @role.


</description>
<parameters>
<parameter name="role">
<parameter_description> The #AtkRole whose name is required
</parameter_description>
</parameter>
</parameters>
<return> the string describing the AtkRole
</return>
</function>

<function name="atk_role_register">
<description>
Registers the role specified by @name. @name must be a meaningful
name. So it should not be empty, or consisting on whitespaces.

Deprecated: Since 2.12. If your application/toolkit doesn't find a
suitable role for a specific object defined at #AtkRole, please
submit a bug in order to add a new role to the specification.


</description>
<parameters>
<parameter name="name">
<parameter_description> a character string describing the new role.
</parameter_description>
</parameter>
</parameters>
<return> an #AtkRole for the new role if added
properly. ATK_ROLE_INVALID in case of error.
</return>
</function>

<function name="atk_selection_add_selection">
<description>
Adds the specified accessible child of the object to the
object's selection.


</description>
<parameters>
<parameter name="selection">
<parameter_description> a #GObject instance that implements AtkSelectionIface
</parameter_description>
</parameter>
<parameter name="i">
<parameter_description> a #gint specifying the child index.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if success, FALSE otherwise.
</return>
</function>

<function name="atk_selection_clear_selection">
<description>
Clears the selection in the object so that no children in the object
are selected.


</description>
<parameters>
<parameter name="selection">
<parameter_description> a #GObject instance that implements AtkSelectionIface
</parameter_description>
</parameter>
</parameters>
<return> TRUE if success, FALSE otherwise.
</return>
</function>

<function name="atk_selection_get_selection_count">
<description>
Gets the number of accessible children currently selected.
Note: callers should not rely on %NULL or on a zero value for
indication of whether AtkSelectionIface is implemented, they should
use type checking/interface checking macros or the
atk_get_accessible_value() convenience method.


</description>
<parameters>
<parameter name="selection">
<parameter_description> a #GObject instance that implements AtkSelectionIface
</parameter_description>
</parameter>
</parameters>
<return> a gint representing the number of items selected, or 0
if @selection does not implement this interface.
</return>
</function>

<function name="atk_selection_is_child_selected">
<description>
Determines if the current child of this object is selected
Note: callers should not rely on %NULL or on a zero value for
indication of whether AtkSelectionIface is implemented, they should
use type checking/interface checking macros or the
atk_get_accessible_value() convenience method.


</description>
<parameters>
<parameter name="selection">
<parameter_description> a #GObject instance that implements AtkSelectionIface
</parameter_description>
</parameter>
<parameter name="i">
<parameter_description> a #gint specifying the child index.
</parameter_description>
</parameter>
</parameters>
<return> a gboolean representing the specified child is selected, or 0
if @selection does not implement this interface.
</return>
</function>

<function name="atk_selection_ref_selection">
<description>
Gets a reference to the accessible object representing the specified 
selected child of the object.
Note: callers should not rely on %NULL or on a zero value for
indication of whether AtkSelectionIface is implemented, they should
use type checking/interface checking macros or the
atk_get_accessible_value() convenience method.


</description>
<parameters>
<parameter name="selection">
<parameter_description> a #GObject instance that implements AtkSelectionIface
</parameter_description>
</parameter>
<parameter name="i">
<parameter_description> a #gint specifying the index in the selection set.  (e.g. the
ith selection as opposed to the ith child).
</parameter_description>
</parameter>
</parameters>
<return> an #AtkObject representing the
selected accessible, or %NULL if @selection does not implement this
interface.
</return>
</function>

<function name="atk_selection_remove_selection">
<description>
Removes the specified child of the object from the object's selection.


</description>
<parameters>
<parameter name="selection">
<parameter_description> a #GObject instance that implements AtkSelectionIface
</parameter_description>
</parameter>
<parameter name="i">
<parameter_description> a #gint specifying the index in the selection set.  (e.g. the
ith selection as opposed to the ith child).
</parameter_description>
</parameter>
</parameters>
<return> TRUE if success, FALSE otherwise.
</return>
</function>

<function name="atk_selection_select_all_selection">
<description>
Causes every child of the object to be selected if the object
supports multiple selections.


</description>
<parameters>
<parameter name="selection">
<parameter_description> a #GObject instance that implements AtkSelectionIface
</parameter_description>
</parameter>
</parameters>
<return> TRUE if success, FALSE otherwise.
</return>
</function>

<function name="atk_socket_embed">
<description>
Embeds the children of an #AtkPlug as the children of the
#AtkSocket. The plug may be in the same process or in a different
process.

The class item used by this function should be filled in by the IPC
layer (usually at-spi2-atk). The implementor of the AtkSocket
should call this function and pass the id for the plug as returned
by atk_plug_get_id().  It is the responsibility of the application
to pass the plug id on to the process implementing the #AtkSocket
as needed.

Since: 1.30

</description>
<parameters>
<parameter name="obj">
<parameter_description> an #AtkSocket
</parameter_description>
</parameter>
<parameter name="plug_id">
<parameter_description> the ID of an #AtkPlug
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_socket_is_occupied">
<description>
Determines whether or not the socket has an embedded plug.

Since: 1.30

</description>
<parameters>
<parameter name="obj">
<parameter_description> an #AtkSocket
</parameter_description>
</parameter>
</parameters>
<return> TRUE if a plug is embedded in the socket

</return>
</function>

<function name="atk_state_set_add_state">
<description>
Adds the state of the specified type to the state set if it is not already
present.

Note that because an #AtkStateSet is a read-only object, this method should
be used to add a state to a newly-created set which will then be returned by
#atk_object_ref_state_set. It should not be used to modify the existing state
of an object. See also #atk_object_notify_state_change.


</description>
<parameters>
<parameter name="set">
<parameter_description> an #AtkStateSet
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> an #AtkStateType
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if  the state for @type is not already in @set.
</return>
</function>

<function name="atk_state_set_add_states">
<description>
Adds the states of the specified types to the state set.

Note that because an #AtkStateSet is a read-only object, this method should
be used to add states to a newly-created set which will then be returned by
#atk_object_ref_state_set. It should not be used to modify the existing state
of an object. See also #atk_object_notify_state_change.

</description>
<parameters>
<parameter name="set">
<parameter_description> an #AtkStateSet
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> an array of #AtkStateType
</parameter_description>
</parameter>
<parameter name="n_types">
<parameter_description> The number of elements in the array
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_state_set_and_sets">
<description>
Constructs the intersection of the two sets, returning %NULL if the
intersection is empty.


</description>
<parameters>
<parameter name="set">
<parameter_description> an #AtkStateSet
</parameter_description>
</parameter>
<parameter name="compare_set">
<parameter_description> another #AtkStateSet
</parameter_description>
</parameter>
</parameters>
<return> a new #AtkStateSet which is the intersection of
the two sets.
</return>
</function>

<function name="atk_state_set_clear_states">
<description>
Removes all states from the state set.

</description>
<parameters>
<parameter name="set">
<parameter_description> an #AtkStateSet
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_state_set_contains_state">
<description>
Checks whether the state for the specified type is in the specified set.


</description>
<parameters>
<parameter name="set">
<parameter_description> an #AtkStateSet
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> an #AtkStateType
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @type is the state type is in @set.
</return>
</function>

<function name="atk_state_set_contains_states">
<description>
Checks whether the states for all the specified types are in the 
specified set.


</description>
<parameters>
<parameter name="set">
<parameter_description> an #AtkStateSet
</parameter_description>
</parameter>
<parameter name="types">
<parameter_description> an array of #AtkStateType
</parameter_description>
</parameter>
<parameter name="n_types">
<parameter_description> The number of elements in the array
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if all the states for @type are in @set.
</return>
</function>

<function name="atk_state_set_is_empty">
<description>
Checks whether the state set is empty, i.e. has no states set.


</description>
<parameters>
<parameter name="set">
<parameter_description> an #AtkStateType
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @set has no states set, otherwise %FALSE
</return>
</function>

<function name="atk_state_set_new">
<description>
Creates a new empty state set.


</description>
<parameters>
</parameters>
<return> a new #AtkStateSet 
</return>
</function>

<function name="atk_state_set_or_sets">
<description>
Constructs the union of the two sets.


</description>
<parameters>
<parameter name="set">
<parameter_description> an #AtkStateSet
</parameter_description>
</parameter>
<parameter name="compare_set">
<parameter_description> another #AtkStateSet
</parameter_description>
</parameter>
</parameters>
<return> a new #AtkStateSet which is
the union of the two sets, returning %NULL is empty.
</return>
</function>

<function name="atk_state_set_remove_state">
<description>
Removes the state for the specified type from the state set.

Note that because an #AtkStateSet is a read-only object, this method should
be used to remove a state to a newly-created set which will then be returned
by #atk_object_ref_state_set. It should not be used to modify the existing
state of an object. See also #atk_object_notify_state_change.


</description>
<parameters>
<parameter name="set">
<parameter_description> an #AtkStateSet
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> an #AtkType
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @type was the state type is in @set.
</return>
</function>

<function name="atk_state_set_xor_sets">
<description>
Constructs the exclusive-or of the two sets, returning %NULL is empty.
The set returned by this operation contains the states in exactly
one of the two sets.


</description>
<parameters>
<parameter name="set">
<parameter_description> an #AtkStateSet
</parameter_description>
</parameter>
<parameter name="compare_set">
<parameter_description> another #AtkStateSet
</parameter_description>
</parameter>
</parameters>
<return> a new #AtkStateSet which contains the states
which are in exactly one of the two sets.
</return>
</function>

<function name="atk_state_type_for_name">
<description>
Gets the #AtkStateType corresponding to the description string @name.


</description>
<parameters>
<parameter name="name">
<parameter_description> a character string state name
</parameter_description>
</parameter>
</parameters>
<return> an #AtkStateType corresponding to @name 
</return>
</function>

<function name="atk_state_type_get_name">
<description>
Gets the description string describing the #AtkStateType @type.


</description>
<parameters>
<parameter name="type">
<parameter_description> The #AtkStateType whose name is required
</parameter_description>
</parameter>
</parameters>
<return> the string describing the AtkStateType
</return>
</function>

<function name="atk_state_type_register">
<description>
Register a new object state.


</description>
<parameters>
<parameter name="name">
<parameter_description> a character string describing the new state.
</parameter_description>
</parameter>
</parameters>
<return> an #AtkState value for the new state.
</return>
</function>

<function name="atk_streamable_content_get_mime_type">
<description>
Gets the character string of the specified mime type. The first mime
type is at position 0, the second at position 1, and so on.


</description>
<parameters>
<parameter name="streamable">
<parameter_description> a GObject instance that implements AtkStreamableContent
</parameter_description>
</parameter>
<parameter name="i">
<parameter_description> a gint representing the position of the mime type starting from 0
</parameter_description>
</parameter>
</parameters>
<return> a gchar* representing the specified mime type; the caller
should not free the character string.
</return>
</function>

<function name="atk_streamable_content_get_n_mime_types">
<description>
Gets the number of mime types supported by this object.


</description>
<parameters>
<parameter name="streamable">
<parameter_description> a GObject instance that implements AtkStreamableContentIface
</parameter_description>
</parameter>
</parameters>
<return> a gint which is the number of mime types supported by the object.
</return>
</function>

<function name="atk_streamable_content_get_stream">
<description>
Gets the content in the specified mime type.


</description>
<parameters>
<parameter name="streamable">
<parameter_description> a GObject instance that implements AtkStreamableContentIface
</parameter_description>
</parameter>
<parameter name="mime_type">
<parameter_description> a gchar* representing the mime type
</parameter_description>
</parameter>
</parameters>
<return> A #GIOChannel which contains the content in the
specified mime type.
</return>
</function>

<function name="atk_streamable_content_get_uri">
<description>
Get a string representing a URI in IETF standard format
(see http://www.ietf.org/rfc/rfc2396.txt) from which the object's content
may be streamed in the specified mime-type, if one is available.
If mime_type is NULL, the URI for the default (and possibly only) mime-type is
returned. 

Note that it is possible for get_uri to return NULL but for
get_stream to work nonetheless, since not all GIOChannels connect to URIs.

Since: 1.12

</description>
<parameters>
<parameter name="streamable">
<parameter_description> a GObject instance that implements AtkStreamableContentIface
</parameter_description>
</parameter>
<parameter name="mime_type">
<parameter_description> a gchar* representing the mime type, or NULL to request a URI 
for the default mime type.
</parameter_description>
</parameter>
</parameters>
<return> Returns a string representing a URI, or %NULL
if no corresponding URI can be constructed.

</return>
</function>

<function name="atk_table_add_column_selection">
<description>
Adds the specified @column to the selection. 


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #gint representing a column in @table
</parameter_description>
</parameter>
</parameters>
<return> a gboolean representing if the column was successfully added to 
the selection, or 0 if value does not implement this interface.
</return>
</function>

<function name="atk_table_add_row_selection">
<description>
Adds the specified @row to the selection. 


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a #gint representing a row in @table
</parameter_description>
</parameter>
</parameters>
<return> a gboolean representing if row was successfully added to selection,
or 0 if value does not implement this interface.
</return>
</function>

<function name="atk_table_cell_get_column_header_cells">
<description>
Returns the column headers as an array of cell accessibles.

Since: 2.12

</description>
<parameters>
<parameter name="cell">
<parameter_description> a GObject instance that implements AtkTableCellIface
</parameter_description>
</parameter>
</parameters>
<return> a GPtrArray of AtkObjects
representing the column header cells.

</return>
</function>

<function name="atk_table_cell_get_column_span">
<description>
Returns the number of columns occupied by this cell accessible.

Since: 2.12

</description>
<parameters>
<parameter name="cell">
<parameter_description> a GObject instance that implements AtkTableCellIface
</parameter_description>
</parameter>
</parameters>
<return> a gint representing the number of columns occupied by this cell,
or 0 if the cell does not implement this method.

</return>
</function>

<function name="atk_table_cell_get_position">
<description>
Retrieves the tabular position of this cell.

Since: 2.12

</description>
<parameters>
<parameter name="cell">
<parameter_description> a GObject instance that implements AtkTableCellIface
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> the row of the given cell.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> the column of the given cell.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if successful; FALSE otherwise.

</return>
</function>

<function name="atk_table_cell_get_row_column_span">
<description>
Gets the row and column indexes and span of this cell accessible.

Note: If the object does not implement this function, then, by default, atk
will implement this function by calling get_row_span and get_column_span
on the object.

Since: 2.12

</description>
<parameters>
<parameter name="cell">
<parameter_description> a GObject instance that implements AtkTableCellIface
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> the row index of the given cell.
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> the column index of the given cell.
</parameter_description>
</parameter>
<parameter name="row_span">
<parameter_description> the number of rows occupied by this cell.
</parameter_description>
</parameter>
<parameter name="column_span">
<parameter_description> the number of columns occupied by this cell.
</parameter_description>
</parameter>
</parameters>
<return> TRUE if successful; FALSE otherwise.

</return>
</function>

<function name="atk_table_cell_get_row_header_cells">
<description>
Returns the row headers as an array of cell accessibles.

Since: 2.12

</description>
<parameters>
<parameter name="cell">
<parameter_description> a GObject instance that implements AtkTableCellIface
</parameter_description>
</parameter>
</parameters>
<return> a GPtrArray of AtkObjects
representing the row header cells.

</return>
</function>

<function name="atk_table_cell_get_row_span">
<description>
Returns the number of rows occupied by this cell accessible.

Since: 2.12

</description>
<parameters>
<parameter name="cell">
<parameter_description> a GObject instance that implements AtkTableCellIface
</parameter_description>
</parameter>
</parameters>
<return> a gint representing the number of rows occupied by this cell,
or 0 if the cell does not implement this method.

</return>
</function>

<function name="atk_table_cell_get_table">
<description>
Returns a reference to the accessible of the containing table.

Since: 2.12

</description>
<parameters>
<parameter name="cell">
<parameter_description> a GObject instance that implements AtkTableCellIface
</parameter_description>
</parameter>
</parameters>
<return> the atk object for the containing table.

</return>
</function>

<function name="atk_table_get_caption">
<description>
Gets the caption for the @table.


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableInterface
</parameter_description>
</parameter>
</parameters>
<return> a AtkObject* representing the
table caption, or %NULL if value does not implement this interface.
</return>
</function>

<function name="atk_table_get_column_at_index">
<description>
Gets a #gint representing the column at the specified @index_.

Deprecated: Since 2.12.


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableInterface
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> a #gint representing an index in @table
</parameter_description>
</parameter>
</parameters>
<return> a gint representing the column at the specified index,
or -1 if the table does not implement this method.
</return>
</function>

<function name="atk_table_get_column_description">
<description>
Gets the description text of the specified @column in the table


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #gint representing a column in @table
</parameter_description>
</parameter>
</parameters>
<return> a gchar* representing the column description, or %NULL
if value does not implement this interface.
</return>
</function>

<function name="atk_table_get_column_extent_at">
<description>
Gets the number of columns occupied by the accessible object
at the specified @row and @column in the @table.


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a #gint representing a row in @table
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #gint representing a column in @table
</parameter_description>
</parameter>
</parameters>
<return> a gint representing the column extent at specified position, or 0
if value does not implement this interface.
</return>
</function>

<function name="atk_table_get_column_header">
<description>
Gets the column header of a specified column in an accessible table.


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #gint representing a column in the table
</parameter_description>
</parameter>
</parameters>
<return> a AtkObject* representing the
specified column header, or %NULL if value does not implement this
interface.
</return>
</function>

<function name="atk_table_get_index_at">
<description>
Gets a #gint representing the index at the specified @row and
@column.

Deprecated: Since 2.12. Use atk_table_ref_at() in order to get the
accessible that represents the cell at (@row, @column)


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a #gint representing a row in @table
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #gint representing a column in @table
</parameter_description>
</parameter>
</parameters>
<return> a #gint representing the index at specified position.
The value -1 is returned if the object at row,column is not a child
of table or table does not implement this interface.
</return>
</function>

<function name="atk_table_get_n_columns">
<description>
Gets the number of columns in the table.


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
</parameters>
<return> a gint representing the number of columns, or 0
if value does not implement this interface.
</return>
</function>

<function name="atk_table_get_n_rows">
<description>
Gets the number of rows in the table.


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
</parameters>
<return> a gint representing the number of rows, or 0
if value does not implement this interface.
</return>
</function>

<function name="atk_table_get_row_at_index">
<description>
Gets a #gint representing the row at the specified @index_.

Deprecated: since 2.12.


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableInterface
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> a #gint representing an index in @table
</parameter_description>
</parameter>
</parameters>
<return> a gint representing the row at the specified index,
or -1 if the table does not implement this method.
</return>
</function>

<function name="atk_table_get_row_description">
<description>
Gets the description text of the specified row in the table


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a #gint representing a row in @table
</parameter_description>
</parameter>
</parameters>
<return> a gchar* representing the row description, or
%NULL if value does not implement this interface.
</return>
</function>

<function name="atk_table_get_row_extent_at">
<description>
Gets the number of rows occupied by the accessible object
at a specified @row and @column in the @table.


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a #gint representing a row in @table
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #gint representing a column in @table
</parameter_description>
</parameter>
</parameters>
<return> a gint representing the row extent at specified position, or 0
if value does not implement this interface.
</return>
</function>

<function name="atk_table_get_row_header">
<description>
Gets the row header of a specified row in an accessible table.


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a #gint representing a row in the table
</parameter_description>
</parameter>
</parameters>
<return> a AtkObject* representing the
specified row header, or %NULL if value does not implement this
interface.
</return>
</function>

<function name="atk_table_get_selected_columns">
<description>
Gets the selected columns of the table by initializing **selected with 
the selected column numbers. This array should be freed by the caller.


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="selected">
<parameter_description> a #gint** that is to contain the selected columns numbers
</parameter_description>
</parameter>
</parameters>
<return> a gint representing the number of selected columns,
or %0 if value does not implement this interface.
</return>
</function>

<function name="atk_table_get_selected_rows">
<description>
Gets the selected rows of the table by initializing **selected with 
the selected row numbers. This array should be freed by the caller.


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="selected">
<parameter_description> a #gint** that is to contain the selected row numbers
</parameter_description>
</parameter>
</parameters>
<return> a gint representing the number of selected rows,
or zero if value does not implement this interface.
</return>
</function>

<function name="atk_table_get_summary">
<description>
Gets the summary description of the table.


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
</parameters>
<return> a AtkObject* representing a summary description
of the table, or zero if value does not implement this interface.
</return>
</function>

<function name="atk_table_is_column_selected">
<description>
Gets a boolean value indicating whether the specified @column
is selected


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #gint representing a column in @table
</parameter_description>
</parameter>
</parameters>
<return> a gboolean representing if the column is selected, or 0
if value does not implement this interface.
</return>
</function>

<function name="atk_table_is_row_selected">
<description>
Gets a boolean value indicating whether the specified @row
is selected


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a #gint representing a row in @table
</parameter_description>
</parameter>
</parameters>
<return> a gboolean representing if the row is selected, or 0
if value does not implement this interface.
</return>
</function>

<function name="atk_table_is_selected">
<description>
Gets a boolean value indicating whether the accessible object
at the specified @row and @column is selected


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a #gint representing a row in @table
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #gint representing a column in @table
</parameter_description>
</parameter>
</parameters>
<return> a gboolean representing if the cell is selected, or 0
if value does not implement this interface.
</return>
</function>

<function name="atk_table_ref_at">
<description>
Get a reference to the table cell at @row, @column. This cell
should implement the interface #AtkTableCell


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a #gint representing a row in @table
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #gint representing a column in @table
</parameter_description>
</parameter>
</parameters>
<return> an #AtkObject representing the referred
to accessible
</return>
</function>

<function name="atk_table_remove_column_selection">
<description>
Adds the specified @column to the selection. 


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #gint representing a column in @table
</parameter_description>
</parameter>
</parameters>
<return> a gboolean representing if the column was successfully removed from
the selection, or 0 if value does not implement this interface.
</return>
</function>

<function name="atk_table_remove_row_selection">
<description>
Removes the specified @row from the selection. 


</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a #gint representing a row in @table
</parameter_description>
</parameter>
</parameters>
<return> a gboolean representing if the row was successfully removed from
the selection, or 0 if value does not implement this interface.
</return>
</function>

<function name="atk_table_set_caption">
<description>
Sets the caption for the table.

</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="caption">
<parameter_description> a #AtkObject representing the caption to set for @table
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_table_set_column_description">
<description>
Sets the description text for the specified @column of the @table.

</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #gint representing a column in @table
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> a #gchar representing the description text
to set for the specified @column of the @table
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_table_set_column_header">
<description>
Sets the specified column header to @header.

</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="column">
<parameter_description> a #gint representing a column in @table
</parameter_description>
</parameter>
<parameter name="header">
<parameter_description> an #AtkTable
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_table_set_row_description">
<description>
Sets the description text for the specified @row of @table.

</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a #gint representing a row in @table
</parameter_description>
</parameter>
<parameter name="description">
<parameter_description> a #gchar representing the description text
to set for the specified @row of @table
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_table_set_row_header">
<description>
Sets the specified row header to @header.

</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="row">
<parameter_description> a #gint representing a row in @table
</parameter_description>
</parameter>
<parameter name="header">
<parameter_description> an #AtkTable 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_table_set_summary">
<description>
Sets the summary description of the table.

</description>
<parameters>
<parameter name="table">
<parameter_description> a GObject instance that implements AtkTableIface
</parameter_description>
</parameter>
<parameter name="accessible">
<parameter_description> an #AtkObject representing the summary description
to set for @table
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_text_add_selection">
<description>
Adds a selection bounded by the specified offsets.


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
<parameter name="start_offset">
<parameter_description> the start position of the selected region
</parameter_description>
</parameter>
<parameter name="end_offset">
<parameter_description> the offset of the first character after the selected region.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if success, %FALSE otherwise
</return>
</function>

<function name="atk_text_attribute_for_name">
<description>
Get the #AtkTextAttribute type corresponding to a text attribute name.


</description>
<parameters>
<parameter name="name">
<parameter_description> a string which is the (non-localized) name of an ATK text attribute.
</parameter_description>
</parameter>
</parameters>
<return> the #AtkTextAttribute enumerated type corresponding to the specified
name,
or #ATK_TEXT_ATTRIBUTE_INVALID if no matching text attribute is found.
</return>
</function>

<function name="atk_text_attribute_get_name">
<description>
Gets the name corresponding to the #AtkTextAttribute


</description>
<parameters>
<parameter name="attr">
<parameter_description> The #AtkTextAttribute whose name is required
</parameter_description>
</parameter>
</parameters>
<return> a string containing the name; this string should not be freed
</return>
</function>

<function name="atk_text_attribute_get_value">
<description>
Gets the value for the index of the #AtkTextAttribute


</description>
<parameters>
<parameter name="attr">
<parameter_description> The #AtkTextAttribute for which a value is required
</parameter_description>
</parameter>
<parameter name="index_">
<parameter_description> The index of the required value
</parameter_description>
</parameter>
</parameters>
<return> a string containing the value; this string
should not be freed; %NULL is returned if there are no values
maintained for the attr value.
</return>
</function>

<function name="atk_text_attribute_register">
<description>
Associate @name with a new #AtkTextAttribute


</description>
<parameters>
<parameter name="name">
<parameter_description> a name string
</parameter_description>
</parameter>
</parameters>
<return> an #AtkTextAttribute associated with @name
</return>
</function>

<function name="atk_text_free_ranges">
<description>
Frees the memory associated with an array of AtkTextRange. It is assumed
that the array was returned by the function atk_text_get_bounded_ranges
and is NULL terminated.

Since: 1.3

</description>
<parameters>
<parameter name="ranges">
<parameter_description> A pointer to an array of #AtkTextRange which is
to be freed.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_text_get_bounded_ranges">
<description>
Get the ranges of text in the specified bounding box.

Since: 1.3


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> An AtkTextRectangle giving the dimensions of the bounding box.
</parameter_description>
</parameter>
<parameter name="coord_type">
<parameter_description> Specify whether coordinates are relative to the screen or widget window.
</parameter_description>
</parameter>
<parameter name="x_clip_type">
<parameter_description> Specify the horizontal clip type.
</parameter_description>
</parameter>
<parameter name="y_clip_type">
<parameter_description> Specify the vertical clip type.
</parameter_description>
</parameter>
</parameters>
<return> Array of AtkTextRange. The last
element of the array returned by this function will be NULL.
</return>
</function>

<function name="atk_text_get_caret_offset">
<description>
Gets the offset position of the caret (cursor).


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
</parameters>
<return> the offset position of the caret (cursor).
</return>
</function>

<function name="atk_text_get_character_at_offset">
<description>
Gets the specified text.


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> position
</parameter_description>
</parameter>
</parameters>
<return> the character at @offset.
</return>
</function>

<function name="atk_text_get_character_count">
<description>
Gets the character count.


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
</parameters>
<return> the number of characters.
</return>
</function>

<function name="atk_text_get_character_extents">
<description>
Get the bounding box containing the glyph representing the character at 
a particular text offset. 

</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> The offset of the text character for which bounding information is required.
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> Pointer for the x cordinate of the bounding box
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> Pointer for the y cordinate of the bounding box
</parameter_description>
</parameter>
<parameter name="width">
<parameter_description> Pointer for the width of the bounding box
</parameter_description>
</parameter>
<parameter name="height">
<parameter_description> Pointer for the height of the bounding box
</parameter_description>
</parameter>
<parameter name="coords">
<parameter_description> specify whether coordinates are relative to the screen or widget window 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_text_get_default_attributes">
<description>
Creates an #AtkAttributeSet which consists of the default values of
attributes for the text. See the enum AtkTextAttribute for types of text 
attributes that can be returned. Note that other attributes may also be 
returned.


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
</parameters>
<return> an #AtkAttributeSet which contains the default
values of attributes.  at @offset. this #atkattributeset should be freed by
a call to atk_attribute_set_free().
</return>
</function>

<function name="atk_text_get_n_selections">
<description>
Gets the number of selected regions.


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
</parameters>
<return> The number of selected regions, or -1 if a failure
occurred.
</return>
</function>

<function name="atk_text_get_offset_at_point">
<description>
Gets the offset of the character located at coordinates @x and @y. @x and @y
are interpreted as being relative to the screen or this widget's window
depending on @coords.


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
<parameter name="x">
<parameter_description> screen x-position of character
</parameter_description>
</parameter>
<parameter name="y">
<parameter_description> screen y-position of character
</parameter_description>
</parameter>
<parameter name="coords">
<parameter_description> specify whether coordinates are relative to the screen or
widget window 
</parameter_description>
</parameter>
</parameters>
<return> the offset to the character which is located at
the specified @x and @y coordinates.
</return>
</function>

<function name="atk_text_get_range_extents">
<description>
Get the bounding box for text within the specified range.

Since: 1.3

</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
<parameter name="start_offset">
<parameter_description> The offset of the first text character for which boundary 
information is required.
</parameter_description>
</parameter>
<parameter name="end_offset">
<parameter_description> The offset of the text character after the last character 
for which boundary information is required.
</parameter_description>
</parameter>
<parameter name="coord_type">
<parameter_description> Specify whether coordinates are relative to the screen or widget window.
</parameter_description>
</parameter>
<parameter name="rect">
<parameter_description> A pointer to a AtkTextRectangle which is filled in by this function.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_text_get_run_attributes">
<description>
Creates an #AtkAttributeSet which consists of the attributes explicitly
set at the position @offset in the text. @start_offset and @end_offset are
set to the start and end of the range around @offset where the attributes are
invariant. Note that @end_offset is the offset of the first character
after the range.  See the enum AtkTextAttribute for types of text 
attributes that can be returned. Note that other attributes may also be 
returned.


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> the offset at which to get the attributes, -1 means the offset of
the character to be inserted at the caret location.
</parameter_description>
</parameter>
<parameter name="start_offset">
<parameter_description> the address to put the start offset of the range
</parameter_description>
</parameter>
<parameter name="end_offset">
<parameter_description> the address to put the end offset of the range
</parameter_description>
</parameter>
</parameters>
<return> an #AtkAttributeSet which contains the attributes
explicitly set at @offset. This #AtkAttributeSet should be freed by a call
to atk_attribute_set_free().
</return>
</function>

<function name="atk_text_get_selection">
<description>
Gets the text from the specified selection.


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
<parameter name="selection_num">
<parameter_description> The selection number.  The selected regions are
assigned numbers that correspond to how far the region is from the
start of the text.  The selected region closest to the beginning
of the text region is assigned the number 0, etc.  Note that adding,
moving or deleting a selected region can change the numbering.
</parameter_description>
</parameter>
<parameter name="start_offset">
<parameter_description> passes back the start position of the selected region
</parameter_description>
</parameter>
<parameter name="end_offset">
<parameter_description> passes back the end position of (e.g. offset immediately past)
the selected region
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the selected text. Use g_free()
to free the returned string.
</return>
</function>

<function name="atk_text_get_string_at_offset">
<description>
Gets a portion of the text exposed through an #AtkText according to a given @offset
and a specific @granularity, along with the start and end offsets defining the
boundaries of such a portion of text.

If @granularity is ATK_TEXT_GRANULARITY_CHAR the character at the
offset is returned.

If @granularity is ATK_TEXT_GRANULARITY_WORD the returned string
is from the word start at or before the offset to the word start after
the offset.

The returned string will contain the word at the offset if the offset
is inside a word and will contain the word before the offset if the
offset is not inside a word.

If @granularity is ATK_TEXT_GRANULARITY_SENTENCE the returned string
is from the sentence start at or before the offset to the sentence
start after the offset.

The returned string will contain the sentence at the offset if the offset
is inside a sentence and will contain the sentence before the offset
if the offset is not inside a sentence.

If @granularity is ATK_TEXT_GRANULARITY_LINE the returned string
is from the line start at or before the offset to the line
start after the offset.

If @granularity is ATK_TEXT_GRANULARITY_PARAGRAPH the returned string
is from the start of the paragraph at or before the offset to the start
of the following paragraph after the offset.

Since: 2.10


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> position
</parameter_description>
</parameter>
<parameter name="granularity">
<parameter_description> An #AtkTextGranularity
</parameter_description>
</parameter>
<parameter name="start_offset">
<parameter_description> the start offset of the returned string, or -1
if an error has occurred (e.g. invalid offset, not implemented)
</parameter_description>
</parameter>
<parameter name="end_offset">
<parameter_description> the offset of the first character after the returned string,
or -1 if an error has occurred (e.g. invalid offset, not implemented)
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the text
at the @offset bounded by the specified @granularity. Use
g_free() to free the returned string.  Returns %NULL if the
offset is invalid or no implementation is available.
</return>
</function>

<function name="atk_text_get_text">
<description>
Gets the specified text.


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
<parameter name="start_offset">
<parameter_description> start position
</parameter_description>
</parameter>
<parameter name="end_offset">
<parameter_description> end position, or -1 for the end of the string.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the text from @start_offset up
to, but not including @end_offset. Use g_free() to free the returned string.
</return>
</function>

<function name="atk_text_get_text_after_offset">
<description>
Gets the specified text.

Deprecated: 2.9.3: Please use atk_text_get_string_at_offset() instead.


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> position
</parameter_description>
</parameter>
<parameter name="boundary_type">
<parameter_description> An #AtkTextBoundary
</parameter_description>
</parameter>
<parameter name="start_offset">
<parameter_description> the start offset of the returned string
</parameter_description>
</parameter>
<parameter name="end_offset">
<parameter_description> the offset of the first character after the
returned substring
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the text after @offset bounded
by the specified @boundary_type. Use g_free() to free the returned string.
</return>
</function>

<function name="atk_text_get_text_at_offset">
<description>
Gets the specified text.

If the boundary_type if ATK_TEXT_BOUNDARY_CHAR the character at the
offset is returned.

If the boundary_type is ATK_TEXT_BOUNDARY_WORD_START the returned string
is from the word start at or before the offset to the word start after
the offset.

The returned string will contain the word at the offset if the offset
is inside a word and will contain the word before the offset if the
offset is not inside a word.

If the boundary type is ATK_TEXT_BOUNDARY_SENTENCE_START the returned
string is from the sentence start at or before the offset to the sentence
start after the offset.

The returned string will contain the sentence at the offset if the offset
is inside a sentence and will contain the sentence before the offset
if the offset is not inside a sentence.

If the boundary type is ATK_TEXT_BOUNDARY_LINE_START the returned
string is from the line start at or before the offset to the line
start after the offset.

Deprecated: This method is deprecated since ATK version
2.9.4. Please use atk_text_get_string_at_offset() instead.


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> position
</parameter_description>
</parameter>
<parameter name="boundary_type">
<parameter_description> An #AtkTextBoundary
</parameter_description>
</parameter>
<parameter name="start_offset">
<parameter_description> the start offset of the returned string
</parameter_description>
</parameter>
<parameter name="end_offset">
<parameter_description> the offset of the first character after the
returned substring
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the text at @offset bounded by
the specified @boundary_type. Use g_free() to free the returned string.
</return>
</function>

<function name="atk_text_get_text_before_offset">
<description>
Gets the specified text.

Deprecated: 2.9.3: Please use atk_text_get_string_at_offset() instead.


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> position
</parameter_description>
</parameter>
<parameter name="boundary_type">
<parameter_description> An #AtkTextBoundary
</parameter_description>
</parameter>
<parameter name="start_offset">
<parameter_description> the start offset of the returned string
</parameter_description>
</parameter>
<parameter name="end_offset">
<parameter_description> the offset of the first character after the
returned substring
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the text before @offset bounded
by the specified @boundary_type. Use g_free() to free the returned string.
</return>
</function>

<function name="atk_text_remove_selection">
<description>
Removes the specified selection.


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
<parameter name="selection_num">
<parameter_description> The selection number.  The selected regions are
assigned numbers that correspond to how far the region is from the
start of the text.  The selected region closest to the beginning
of the text region is assigned the number 0, etc.  Note that adding,
moving or deleting a selected region can change the numbering.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if success, %FALSE otherwise
</return>
</function>

<function name="atk_text_set_caret_offset">
<description>
Sets the caret (cursor) position to the specified @offset.


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> position
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if success, %FALSE otherwise.
</return>
</function>

<function name="atk_text_set_selection">
<description>
Changes the start and end offset of the specified selection.


</description>
<parameters>
<parameter name="text">
<parameter_description> an #AtkText
</parameter_description>
</parameter>
<parameter name="selection_num">
<parameter_description> The selection number.  The selected regions are
assigned numbers that correspond to how far the region is from the
start of the text.  The selected region closest to the beginning
of the text region is assigned the number 0, etc.  Note that adding,
moving or deleting a selected region can change the numbering.
</parameter_description>
</parameter>
<parameter name="start_offset">
<parameter_description> the new start position of the selection
</parameter_description>
</parameter>
<parameter name="end_offset">
<parameter_description> the new end position of (e.g. offset immediately past) 
the selection
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if success, %FALSE otherwise
</return>
</function>

<function name="atk_value_get_current_value">
<description>
Gets the value of this object.

Deprecated: Since 2.12. Use atk_value_get_value_and_text()
instead.

</description>
<parameters>
<parameter name="obj">
<parameter_description> a GObject instance that implements AtkValueIface
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue representing the current accessible value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_value_get_increment">
<description>
Gets the minimum increment by which the value of this object may be
changed.  If zero, the minimum increment is undefined, which may
mean that it is limited only by the floating point precision of the
platform.

Since: 2.12

</description>
<parameters>
<parameter name="obj">
<parameter_description> a GObject instance that implements AtkValueIface
</parameter_description>
</parameter>
</parameters>
<return> the minimum increment by which the value of this
object may be changed. zero if undefined.

</return>
</function>

<function name="atk_value_get_maximum_value">
<description>
Gets the maximum value of this object.

Deprecated: Since 2.12. Use atk_value_get_range() instead.

</description>
<parameters>
<parameter name="obj">
<parameter_description> a GObject instance that implements AtkValueIface
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue representing the maximum accessible value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_value_get_minimum_increment">
<description>
Gets the minimum increment by which the value of this object may be changed.  If zero,
the minimum increment is undefined, which may mean that it is limited only by the 
floating point precision of the platform.

Since: 1.12

Deprecated: Since 2.12. Use atk_value_get_increment() instead.

</description>
<parameters>
<parameter name="obj">
<parameter_description> a GObject instance that implements AtkValueIface
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue representing the minimum increment by which the accessible value may be changed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_value_get_minimum_value">
<description>
Gets the minimum value of this object.

Deprecated: Since 2.12. Use atk_value_get_range() instead.

</description>
<parameters>
<parameter name="obj">
<parameter_description> a GObject instance that implements AtkValueIface
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue representing the minimum accessible value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_value_get_range">
<description>
Gets the range of this object.

Since: 2.12

</description>
<parameters>
<parameter name="obj">
<parameter_description> a GObject instance that implements AtkValueIface
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #AtkRange
that represents the minimum, maximum and descriptor (if available)
of @obj. NULL if that range is not defined.

</return>
</function>

<function name="atk_value_get_sub_ranges">
<description>
Gets the list of subranges defined for this object. See #AtkValue
introduction for examples of subranges and when to expose them.

Since: 2.12

</description>
<parameters>
<parameter name="obj">
<parameter_description> a GObject instance that implements AtkValueIface
</parameter_description>
</parameter>
</parameters>
<return> an #GSList of
#AtkRange which each of the subranges defined for this object. Free
the returns list with g_slist_free().

</return>
</function>

<function name="atk_value_get_value_and_text">
<description>
Gets the current value and the human readable text alternative of
@obj. @text is a newly created string, that must be freed by the
caller. Can be NULL if no descriptor is available.

Since: 2.12

</description>
<parameters>
<parameter name="obj">
<parameter_description> a GObject instance that implements AtkValueIface
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> address of #gdouble to put the current value of @obj
</parameter_description>
</parameter>
<parameter name="text">
<parameter_description> address of #gchar to put the human
readable text alternative for @value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_value_set_current_value">
<description>
Sets the value of this object.

Deprecated: Since 2.12. Use atk_value_set_value() instead.

</description>
<parameters>
<parameter name="obj">
<parameter_description> a GObject instance that implements AtkValueIface
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #GValue which is the desired new accessible value.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if new value is successfully set, %FALSE otherwise.

</return>
</function>

<function name="atk_value_set_value">
<description>
Sets the value of this object.

This method is intended to provide a way to change the value of the
object. In any case, it is possible that the value can't be
modified (ie: a read-only component). If the value changes due this
call, it is possible that the text could change, and will trigger
an #AtkValue::value-changed signal emission.

Note for implementors: the deprecated atk_value_set_current_value()
method returned TRUE or FALSE depending if the value was assigned
or not. In the practice several implementors were not able to
decide it, and returned TRUE in any case. For that reason it is not
required anymore to return if the value was properly assigned or
not.

Since: 2.12

</description>
<parameters>
<parameter name="obj">
<parameter_description> a GObject instance that implements AtkValueIface
</parameter_description>
</parameter>
<parameter name="new_value">
<parameter_description> a double which is the desired new accessible value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="atk_value_type_get_localized_name">
<description>
Gets the localized description string describing the #AtkValueType @value_type.


</description>
<parameters>
<parameter name="value_type">
<parameter_description> The #AtkValueType whose localized name is required
</parameter_description>
</parameter>
</parameters>
<return> the localized string describing the #AtkValueType
</return>
</function>

<function name="atk_value_type_get_name">
<description>
Gets the description string describing the #AtkValueType @value_type.


</description>
<parameters>
<parameter name="role">
<parameter_description> The #AtkValueType whose name is required
</parameter_description>
</parameter>
</parameters>
<return> the string describing the #AtkValueType
</return>
</function>

</root>
